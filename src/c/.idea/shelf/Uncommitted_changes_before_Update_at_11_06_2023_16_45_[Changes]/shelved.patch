Index: databaseInit.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"databaseInit.h\"\r\n\r\nstruct HashTable* readDirectors(char* fileName, struct ListFilm** timeArray, struct HashTableFilm* genreTable, struct HashTableFilm* filmTable){\r\n\r\n    struct HashTable* ht = createEmptyHashTable(2500);\r\n\r\n    FILE *file = fopen(fileName, \"r\");\r\n    if(file == NULL){\r\n        printf(\"File unreadeable\");\r\n        return NULL;\r\n    }\r\n\r\n    char director[256];\r\n    char title[256];\r\n    int duration;\r\n    char genre[256];\r\n    while(!feof(file)){\r\n        fscanf(file, \"%[^;];%[^;];%d;%[^\\n]\\n\", director, title, &duration, genre);\r\n        genre[strcspn(genre, \"\\r\")] = '\\0';\r\n        insert(ht, director, title, duration, genre);\r\n        insertFilm(timeArray, title, duration, genre);\r\n        insertFilmRead(genreTable, title, duration, genre);\r\n        insertFilmRead(filmTable, genre, duration, title);\r\n    }\r\n    fclose(file);\r\n    return ht;\r\n}\r\n\r\nvoid findByDirector(char* director){\r\n    struct HashTable* ht = readDirectors(\"BD_medium.txt\", NULL, NULL, NULL);\r\n    bool exist = NULL;\r\n    int hashedValue = hash_function(ht, director);\r\n    struct Director* d = directorBelongs(ht->table[hashedValue], director);\r\n\r\n    if(d == NULL){ //Retour NULL donc n'exist pas, l'entrée utilisateur n'est pas bonne\r\n        exist = false;\r\n    }\r\n    else exist = true;\r\n\r\n\r\n    //Création du fichier results\r\n    FILE* result;\r\n    FILE* ready;\r\n    result = fopen(\"results.txt\", \"w\");\r\n    if(!exist){ //Directeur inexistant, je renvoie NULL\r\n        fprintf(result, \"NULL\");\r\n        fclose(result);\r\n        return;\r\n    }\r\n    else{ //Je vais itérer sur toute la liste du director\r\n        struct CellFilm* iter = d->films->head;\r\n        int listSize = listSizeFilm(d->films);\r\n        fprintf(result, \"%d\", 0); //j'insère le temps de la fonction\r\n        for(int i = 0; i < listSize; i++){\r\n            fprintf(result, \"%d\", 0);\r\n            fprintf(result, \"\\n%s;%d;%s\", iter->nomFilm, iter->duration, iter->genre); //je rajoute les champs séparés par des \";\"\r\n            iter = iter->next;\r\n        }\r\n    }\r\n    fclose(result);\r\n    ready = fopen(\"ready.txt\", \"w\"); //Création du fichier prêt pour lecture du côté front end;\r\n    fclose(ready);\r\n    deleteHashTable(&ht);\r\n\r\n}\r\n\r\nvoid findByDuration(int duration){\r\n    struct ListFilm** timeArray = createTimeArray();\r\n    struct HashTable* ht = readDirectors(\"BD_medium.txt\", timeArray, NULL, NULL);\r\n    FILE* ready;\r\n    FILE* result;\r\n    result = fopen(\"results.txt\", \"w\");\r\n\r\n\r\n    if(duration > 500 || duration < 0){\r\n        fscanf(result, \"NULL\");\r\n        fclose(result);\r\n        return;\r\n    }\r\n    else{\r\n        struct CellFilm* iter = timeArray[duration]->head;\r\n        int listSize = listSizeFilm(timeArray[duration]);\r\n        fprintf(result, \"%d\", 0); //j'insère le temps de la fonction\r\n        for(int i = 0; i < listSize; i++){\r\n            fprintf(result, \"\\n%s;%d;%s\", iter->nomFilm, iter->duration, iter->genre); //je rajoute les champs séparés par des \";\"\r\n\r\n            iter = iter->next;\r\n        }\r\n    }\r\n    fclose(result);\r\n    ready = fopen(\"ready.txt\", \"w\");\r\n    fclose(ready);\r\n\r\n    freeTimeArray(timeArray);\r\n    deleteHashTable(&ht);\r\n\r\n}\r\n\r\nvoid randomFilm(){\r\n    srand(time(NULL));\r\n    int r = 0;\r\n    struct HashTableFilm* films = createEmptyHashTableFilm(1000);\r\n    readDirectors(\"BD_medium.txt\", NULL, NULL, NULL);\r\n    FILE* result;\r\n    FILE* ready;\r\n    result = fopen(\"results.txt\", \"w\");\r\n    fprintf(result, \"%d\", 0);\r\n    for(int i =0; i < 4; i++){ //Je génère 4 films aléatoire\r\n\r\n        r = rand()%films->buckets;\r\n        fprintf(result, \"\\n%s;%d;%s\", films->table[r]->head->genre, films->table[r]->head->duration, films->table[r]->head->nomFilm); //J'ajoute depuis des positions 4 films;\r\n    }\r\n    fclose(result);\r\n    ready = fopen(\"ready.txt\", \"w\"); //Création du fichier prêt pour lecture du côté front end;\r\n    fclose(ready);\r\n\r\n    deleteHashTableFilm(&films);\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/databaseInit.c b/databaseInit.c
--- a/databaseInit.c	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/databaseInit.c	(date 1686494323927)
@@ -1,4 +1,5 @@
 #include "databaseInit.h"
+#include<unistd.h>
 
 struct HashTable* readDirectors(char* fileName, struct ListFilm** timeArray, struct HashTableFilm* genreTable, struct HashTableFilm* filmTable){
 
@@ -14,20 +15,23 @@
     char title[256];
     int duration;
     char genre[256];
+    int maxFilm = 0;
     while(!feof(file)){
-        fscanf(file, "%[^;];%[^;];%d;%[^\n]\n", director, title, &duration, genre);
+        fscanf(file, "%[^;];%[^;];%d;%[^\n]\n", director, title, &duration, genre); //Lis les champs avec comme séparateur le point virgule
         genre[strcspn(genre, "\r")] = '\0';
-        insert(ht, director, title, duration, genre);
+        insert(ht, director, title, duration, genre, &maxFilm);
         insertFilm(timeArray, title, duration, genre);
-        insertFilmRead(genreTable, title, duration, genre);
-        insertFilmRead(filmTable, genre, duration, title);
+        insertFilmGenre(genreTable, genre, duration, title); //Table de Hashage selon le genre
+        insertFilmRead(filmTable, genre, duration, title); //Table de Hachage selon le titre du film
     }
     fclose(file);
     return ht;
 }
 
-void findByDirector(char* director){
-    struct HashTable* ht = readDirectors("BD_medium.txt", NULL, NULL, NULL);
+void findByDirector(char* director, struct HashTable* ht){
+    double time_spent = 0.0;
+    clock_t begin = clock();
+
     bool exist = NULL;
     int hashedValue = hash_function(ht, director);
     struct Director* d = directorBelongs(ht->table[hashedValue], director);
@@ -45,14 +49,18 @@
     if(!exist){ //Directeur inexistant, je renvoie NULL
         fprintf(result, "NULL");
         fclose(result);
+        ready = fopen("ready.txt", "w");
+        fclose(ready);
         return;
     }
     else{ //Je vais itérer sur toute la liste du director
         struct CellFilm* iter = d->films->head;
         int listSize = listSizeFilm(d->films);
-        fprintf(result, "%d", 0); //j'insère le temps de la fonction
+
+        clock_t end = clock();
+        time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
+        fprintf(result, "%f", time_spent); //j'insère le temps de la fonction //j'insère le temps de la fonction
         for(int i = 0; i < listSize; i++){
-            fprintf(result, "%d", 0);
             fprintf(result, "\n%s;%d;%s", iter->nomFilm, iter->duration, iter->genre); //je rajoute les champs séparés par des ";"
             iter = iter->next;
         }
@@ -60,27 +68,33 @@
     fclose(result);
     ready = fopen("ready.txt", "w"); //Création du fichier prêt pour lecture du côté front end;
     fclose(ready);
-    deleteHashTable(&ht);
+
 
 }
 
-void findByDuration(int duration){
-    struct ListFilm** timeArray = createTimeArray();
-    struct HashTable* ht = readDirectors("BD_medium.txt", timeArray, NULL, NULL);
+void findByDuration(int duration, struct ListFilm** timeArray){
+    double time_spent = 0.0;
+    clock_t begin = clock();
+
     FILE* ready;
     FILE* result;
     result = fopen("results.txt", "w");
 
 
-    if(duration > 500 || duration < 0){
-        fscanf(result, "NULL");
+    if(duration > 500 || duration < 0 || timeArray[duration]->head == NULL || isListEmptyFilm(*timeArray)){
+        fprintf(result, "NULL");
         fclose(result);
+        ready = fopen("ready.txt", "w");
+        fclose(ready);
         return;
     }
     else{
         struct CellFilm* iter = timeArray[duration]->head;
         int listSize = listSizeFilm(timeArray[duration]);
-        fprintf(result, "%d", 0); //j'insère le temps de la fonction
+
+        clock_t end = clock();
+        time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
+        fprintf(result, "%f", time_spent); //j'insère le temps de la fonction //j'insère le temps de la fonction
         for(int i = 0; i < listSize; i++){
             fprintf(result, "\n%s;%d;%s", iter->nomFilm, iter->duration, iter->genre); //je rajoute les champs séparés par des ";"
 
@@ -91,20 +105,61 @@
     ready = fopen("ready.txt", "w");
     fclose(ready);
 
-    freeTimeArray(timeArray);
-    deleteHashTable(&ht);
+
+}
+
+void findByGenre(char* genre, struct HashTableFilm* genres){
+    double time_spent = 0.0;
+    clock_t begin = clock();
+
+    int hashedValue = hash_functionGenre(genres, genre);
+
+    FILE* ready;
+    FILE* result;
+    result = fopen("results.txt", "w");
+
+    if(hashedValue > 130 || hashedValue < 0 || isListEmptyFilm(genres->table[hashedValue])){ //Le genre rentrée n'est pas connu dans la base de donnée
+        fprintf(result, "NULL");
+        fclose(result);
+        ready = fopen("ready.txt", "w");
+        fclose(ready);
+        return;
+    }
+
+    struct CellFilm* iter = genres->table[hashedValue]->head;
+    while(strcmp(iter->genre, genre) != 0){ //Je vais au buckets, s'il y a des collisions je me déplace jusqu'à avoir le bon genre
+        iter = iter->next;
+    }
+
+    clock_t end = clock();
+    time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
+    fprintf(result, "%f", time_spent); //j'insère le temps de la fonction
 
-}
+    while(iter != NULL && strcmp(iter->genre, genre) == 0) { //Je parcours la différence restante de la liste
+        fprintf(result, "\n%s;%d;%s", iter->nomFilm, iter->duration, iter->genre);
+        iter = iter->next;
+    }
 
-void randomFilm(){
+    fclose(result);
+    ready = fopen("ready.txt", "w");
+    fclose(ready);
+
+}
+
+void randomFilm(struct HashTableFilm* films){
+    double time_spent = 0.0;
+    clock_t begin = clock();
     srand(time(NULL));
     int r = 0;
-    struct HashTableFilm* films = createEmptyHashTableFilm(1000);
-    readDirectors("BD_medium.txt", NULL, NULL, NULL);
+
     FILE* result;
     FILE* ready;
     result = fopen("results.txt", "w");
-    fprintf(result, "%d", 0);
+
+    clock_t end = clock();
+    time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
+    fprintf(result, "%f", time_spent); //j'insère le temps de la fonction
+
     for(int i =0; i < 4; i++){ //Je génère 4 films aléatoire
 
         r = rand()%films->buckets;
@@ -114,9 +169,63 @@
     ready = fopen("ready.txt", "w"); //Création du fichier prêt pour lecture du côté front end;
     fclose(ready);
 
-    deleteHashTableFilm(&films);
+}
+
+void allDirectors(struct HashTable* dir){
+    double time_spent = 0.0;
+    clock_t begin = clock();
+
+    int size = dir->buckets;
+    FILE* result;
+    FILE* ready;
+    result = fopen("results.txt", "w");
+
+    clock_t end = clock();
+    time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
+    fprintf(result, "%f", time_spent); //j'insère le temps de la fonction
+
+    struct Director* iter;
+    for(int i = 0; i < size; i++) { //Je parcours tous les buckets
+
+        if (!isListEmptyDirector(dir->table[i])) {
+            int listSize = listSizeDirector(dir->table[i]);
+            iter = dir->table[i]->head;
+
+            for (int j = 0;
+                 j < listSize; j++); //A chaque bucket je parcours le list associée et je print le nom du directeur
+            fprintf(result, "\n%s", iter->name);
+            iter = iter->next;
+        }
+    }
 
+    fclose(result);
+    ready = fopen("ready.txt", "w"); //Création du fichier prêt pour lecture du côté front end;
+    fclose(ready);
 }
 
+void printTopDirector(struct HashTable* dir){
+    double time_spent = 0.0;
+    clock_t begin = clock();
+
+    FILE* result;
+    FILE* ready;
 
+    result = fopen("results.txt", "w");
+    struct Director* topD = topDirector(dir);
 
+    clock_t end = clock();
+    time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
+    fprintf(result, "%f", time_spent); //j'insère le temps de la fonction
+
+    fprintf(result, "\n%s;%d", topD->name, topD->nmbFilm);
+
+    fclose(result);
+    ready = fopen("ready.txt", "w"); //Création du fichier prêt pour lecture du côté front end;
+    fclose(ready);
+}
+
+void clearInput(){
+    usleep(10000000);
+    remove("results.txt");
+    remove("ready.txt");
+}
\ No newline at end of file
Index: listFilm.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"listFilm.h\"\r\n\r\n\r\nstruct CellFilm* createCellFilm(char* nomFilm, int duration, char* genre){\r\n    struct CellFilm* c = malloc(sizeof(struct CellFilm));\r\n    if(c == NULL){\r\n        printf(\"Cell commited sepuku\");\r\n        return c;\r\n    }\r\n    c -> nomFilm = malloc(sizeof(char)*(strlen(nomFilm)+1));\r\n    strcpy(c->nomFilm, nomFilm);\r\n\r\n    c -> duration = duration;\r\n\r\n    c-> genre = malloc(sizeof(char)*(strlen(genre)+1));\r\n    strcpy(c->genre, genre);\r\n\r\n    c -> next = NULL;\r\n\r\n    return c;\r\n\r\n}\r\n\r\nbool isListEmptyFilm(struct ListFilm* l){\r\n    if(l == NULL){\r\n        return true;\r\n    }\r\n    else return false;\r\n}\r\n\r\nunsigned int listSizeFilm(struct ListFilm* l){\r\n    return l->size;\r\n}\r\n\r\n\r\n\r\nstruct ListFilm* createEmptyListFilm(){\r\n\r\n    struct ListFilm* l1 = malloc(sizeof(struct ListFilm));\r\n    if(l1==NULL){\r\n        printf(\"malloc error\");\r\n        return l1;\r\n    }\r\n    l1->size = 0;\r\n    l1->head = NULL;\r\n\r\n    return l1;\r\n}\r\n\r\nvoid addFirstFilm(struct ListFilm* l, char* nomFilm, int duration, char* genre){\r\n    struct CellFilm* newLHead = createCellFilm(nomFilm, duration, genre);\r\n    if(newLHead==NULL){\r\n        printf(\"head malloc error\");\r\n    }\r\n\r\n    newLHead -> next = l->head;\r\n    l->head = newLHead;\r\n    l->size++;\r\n\r\n}\r\n\r\n\r\nstruct CellFilm* getItemPosFilm(struct ListFilm* l, unsigned int position, bool* valid){\r\n    //here, the position in the exact index of the cell in the lise. No need of -1 position\r\n    if(isListEmptyFilm(l)){\r\n        printf(\"list empty\");\r\n        *valid = false;\r\n        return NULL;\r\n    }\r\n\r\n    if(position >= l->size){\r\n        *valid = false;\r\n    }\r\n\r\n    int i = 0;\r\n    struct CellFilm* iter = l->head;\r\n    while(i <= position-1){\r\n        iter = iter->next;\r\n        i++;\r\n    }\r\n    *valid = true;\r\n    return iter;\r\n}\r\n\r\n\r\nvoid deleteFirstFilm(struct ListFilm* l){\r\n\r\n    if (!isListEmptyFilm(l)) {\r\n        struct CellFilm* newHead = l->head->next;\r\n        free(l->head->nomFilm);\r\n        free(l->head->genre);\r\n        free(l->head);\r\n        l->head = newHead;\r\n        l->size--;\r\n        return;\r\n    }\r\n}\r\n\r\nvoid printListFilm(struct ListFilm* l){\r\n\r\n    if(isListEmptyFilm(l)){\r\n        printf(\"List is empty :(\\n\");\r\n        return;\r\n    }\r\n\r\n    unsigned int size = l->size;\r\n    struct CellFilm* iter = l->head;\r\n\r\n    for(int i = 0; i < size; i++){\r\n        printf(\" -> \");\r\n        printf(\"Nom film: %s - Durée: %d - Genre: %s\\n\", iter->nomFilm, iter->duration, iter->genre);\r\n\r\n        iter = iter->next;\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\r\nvoid addItemPosFilm(struct ListFilm* l, char* nomFilm, int duration, char* genre, unsigned int position, bool* valid){\r\n\r\n    unsigned int size = listSizeFilm(l);\r\n\r\n    if(position > size){\r\n        printf(\"List empty :( or out of range\");\r\n        *valid = false;\r\n        return;\r\n    }\r\n\r\n    if(position==0){\r\n        addFirstFilm(l, nomFilm, duration, genre);\r\n        if(size == listSizeFilm(l)){\r\n            *valid = false;\r\n            return;\r\n        } //même taille, addFrist n'a pas marché\r\n        else{\r\n            *valid = true;\r\n            return;\r\n        }\r\n    }\r\n\r\n    struct CellFilm* newCell = createCellFilm(nomFilm, duration, genre); //je créer la cellule a ajouter\r\n    if(newCell == NULL){\r\n        printf(\"Malloc Error !\");\r\n        *valid = false;\r\n        return;\r\n\r\n    }\r\n\r\n    struct CellFilm* iter = l->head;\r\n    int i = 0;\r\n    while(i < position-1){ // se décale juqsu'à pos-1\r\n        if(iter == NULL){\r\n            printf(\"Hole in the list !\");\r\n            *valid = false;\r\n            return;\r\n        }\r\n        iter = iter->next;\r\n        i++;\r\n    }\r\n    //connecte nouvelle cellule et pos\r\n    newCell -> next = iter -> next;\r\n    iter -> next = newCell;\r\n    l->size++;\r\n    *valid = true;\r\n\r\n}\r\n\r\nvoid deleteItemPosFilm(struct ListFilm* l, unsigned int position, bool* valid){\r\n\r\n    if(isListEmptyFilm(l) || position > listSizeFilm(l)){\r\n        printf(\"Error, list empty or position out of range\");\r\n        *valid = false;\r\n        return;\r\n    }\r\n\r\n    if(position == 0){ //if you want to delete the head\r\n        return deleteFirstFilm(l);\r\n    }\r\n\r\n    struct CellFilm* iter = l->head;\r\n    int i = 0;\r\n    while(i < position-1) {\r\n        iter = iter -> next;\r\n        i++;\r\n    }\r\n\r\n    struct CellFilm* temp = iter -> next; // enregistre le pont à pos-1\r\n    iter->next = iter->next->next;\r\n    l->size--;\r\n    *valid = true;\r\n\r\n    //free the array deleted form the list\r\n    free(temp);\r\n\r\n}\r\n\r\nvoid deleteListFilm(struct ListFilm** l){\r\n\r\n        if(isListEmptyFilm(*l)){\r\n            free(*l);\r\n            *l = NULL;\r\n            return;\r\n        }\r\n        unsigned int size = listSizeFilm(*l);\r\n        for(int i = 0; i < size; i++){\r\n            deleteFirstFilm(*l);\r\n        }\r\n\r\n        free(*l);\r\n        *l = NULL;\r\n}\r\n\r\nstruct CellFilm* filmBelongs(struct ListFilm* l, char* nomFilm, int duration, char* genre){\r\n    if(isListEmptyFilm(l)){\r\n        printf(\"List empty man\");\r\n        return NULL;\r\n    }\r\n\r\n    unsigned int size = listSizeFilm(l);\r\n    struct CellFilm* iter = l->head;\r\n\r\n    for(int i = 0; i < size; i++){\r\n        if(strcmp(iter->nomFilm, nomFilm) == 0 && strcmp(iter->genre, genre) == 0 && iter->duration == duration){\r\n            return iter;\r\n        }\r\n        else{\r\n            iter = iter->next;\r\n        }\r\n    }\r\n    return NULL;\r\n}\r\n\r\nstruct ListFilm** createTimeArray(){\r\n    struct ListFilm** timeArray = malloc(500*sizeof(struct ListFilm*));\r\n    for(int i =0; i < 500; i++){\r\n        timeArray[i] = malloc(sizeof(struct ListFilm));\r\n    }\r\n    return timeArray;\r\n}\r\n\r\nbool insertFilm(struct ListFilm** timeArray, char* title, int duration, char* genre){\r\n    if(isListEmptyFilm(timeArray)){\r\n        return false;\r\n    }\r\n    if(timeArray[duration] == NULL){\r\n        timeArray[duration] = createEmptyListFilm();\r\n        addFirstFilm(timeArray[duration], title, duration, genre);\r\n    }\r\n    else{\r\n        addFirstFilm(timeArray[duration],title, duration, genre);\r\n    }\r\n\r\n}\r\n\r\nvoid freeTimeArray(struct ListFilm** timeArray){\r\n    for(int i = 0; i < 500; i++){\r\n        deleteListFilm(&timeArray[i]);\r\n    }\r\n    free(timeArray);\r\n    timeArray = NULL;\r\n}\r\n\r\nvoid printTimeArray(struct ListFilm** timeArray){\r\n    for(int i = 0; i < 500; i++) {\r\n        if (timeArray[i] != NULL) {\r\n            printf(\"%d: \", i);\r\n            printListFilm(timeArray[i]);\r\n        }\r\n        else printf(\"NONE\");\r\n    }\r\n}\r\n\r\n\r\n\r\n/*int getPosItem(struct ListFilm* l, int value){\r\n    if(isListEmptyFilm(l)){\r\n        printf(\"list empty\");\r\n        return l->size;\r\n    }\r\n\r\n    int i = 0;\r\n    struct CellFilm* iter = l->head;\r\n    while(iter->value != value){\r\n        iter = iter->next;\r\n        i++;\r\n    }\r\n    return i;\r\n}\r\n */\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/listFilm.c b/listFilm.c
--- a/listFilm.c	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/listFilm.c	(date 1686485175903)
@@ -233,12 +233,13 @@
     struct ListFilm** timeArray = malloc(500*sizeof(struct ListFilm*));
     for(int i =0; i < 500; i++){
         timeArray[i] = malloc(sizeof(struct ListFilm));
+
     }
     return timeArray;
 }
 
 bool insertFilm(struct ListFilm** timeArray, char* title, int duration, char* genre){
-    if(isListEmptyFilm(timeArray)){
+    if(isListEmptyFilm(*timeArray)){
         return false;
     }
     if(timeArray[duration] == NULL){
@@ -252,8 +253,10 @@
 }
 
 void freeTimeArray(struct ListFilm** timeArray){
+
     for(int i = 0; i < 500; i++){
         deleteListFilm(&timeArray[i]);
+        free(timeArray[i]);
     }
     free(timeArray);
     timeArray = NULL;
Index: CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>cmake_minimum_required(VERSION 3.18)\r\nproject(c C)\r\n\r\nset(CMAKE_C_STANDARD 11)\r\n\r\nadd_executable(c listFilm.c databaseInit.c listDirector.c hashTableDirectorList.c main.c hashTableFilmList.c)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/CMakeLists.txt	(date 1686494338305)
@@ -3,4 +3,4 @@
 
 set(CMAKE_C_STANDARD 11)
 
-add_executable(c listFilm.c databaseInit.c listDirector.c hashTableDirectorList.c main.c hashTableFilmList.c)
+add_executable(c listFilm.c databaseInit.c listDirector.c hashTableDirectorList.c main.c hashTableFilmList.c accountManagement.c)
Index: main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"hashTableDirectorList.h\"\r\n#include \"hashTableFilmList.h\"\r\n#include \"databaseInit.h\"\r\n#define BUCKET_SIZE 5\r\nvoid testHashTableIDirector();\r\n\r\nint main() {\r\n\r\n    //printHashTable(directors);\r\n    //printf(\"\\n\");\r\n    //printTimeArray(timeArray);\r\n    //printf(\"\\n\");\r\n    //printHashTableFilm(genreTable);\r\n    //printf(\"\\n\");\r\n    //printHashTableFilm(filmTable);\r\n\r\n    //findByDirector(\"Yeung\");\r\n    //randomFilm();\r\n    findByDuration(132);\r\n\r\nreturn 0;\r\n}\r\n\r\nvoid testHashTableIDirector(){\r\n\r\n    struct HashTable* h1 = createEmptyHashTable(BUCKET_SIZE);\r\n    insert(h1, \"Bob\", \"Vroum\", 150, \"Comedy\");\r\n    insert(h1, \"Bob\", \"Papacito\", 11, \"Drouate\");\r\n    insert(h1, \"Alex\", \"Malo\", 2, \"Drama\");\r\n    insert(h1, \"Roger\", \"camp\", 2, \"Drama\");\r\n    insert(h1, \"Mina\", \"rat\", 2, \"Drama\");\r\n    insert(h1, \"Jeanne\", \"papr\", 2, \"Drama\");\r\n\r\n    printHashTable(h1);\r\n    printListFilm(h1->table[4]->head->films);\r\n\r\n    deleteHashTable(&h1);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.c b/main.c
--- a/main.c	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/main.c	(date 1686492803564)
@@ -1,39 +1,94 @@
 #include "hashTableDirectorList.h"
 #include "hashTableFilmList.h"
 #include "databaseInit.h"
-#define BUCKET_SIZE 5
-void testHashTableIDirector();
+
 
 int main() {
 
-    //printHashTable(directors);
-    //printf("\n");
-    //printTimeArray(timeArray);
-    //printf("\n");
-    //printHashTableFilm(genreTable);
-    //printf("\n");
-    //printHashTableFilm(filmTable);
+    //INITI DATABASE
+    double time_spent = 0.0;
+    clock_t begin = clock();
+    struct ListFilm** timeArray = createTimeArray();
+    struct HashTableFilm* films = createEmptyHashTableFilm(1000);
+    struct HashTableFilm* genres = createEmptyHashTableFilm(130);
+    struct HashTable* lib = readDirectors("BD_medium.txt", timeArray, genres, films);
+    clock_t end = clock();
+    time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
+    printf("Database initialized in: %fs\n", time_spent);
+    //END
+
+    //printHashTableFilm(genres);
 
-    //findByDirector("Yeung");
-    //randomFilm();
-    findByDuration(132);
+    //findByDuration(499, timeArray);
+    //findByDirector("Haam", lib);
+    //randomFilm(films);
+    //allDirectors(lib);
+    //findByGenre("Western", genres);
+
+    //LISTNER INCOMMING REQUESTS
+    bool stopInit = false;
+    remove("request.txt");
+    remove("results.txt");
+    remove("ready.txt");
+
+    while(!stopInit) {
+        printf("Listenning for incomming request...\n");
+        FILE *request;
+        request = fopen("request.txt", "r");
+        char functionCalled[32];
+        char parameter[32];
+
+        while (request == NULL) { //Tant qu'un fichier request.txt n'est pas arrivée, je continue de le chercher
+            request = fopen("request.txt", "r");
+        }
+        while (!feof(request)) { //Requête arrivée
+            printf("Request found!\n");
+            fscanf(request, "%[^;];%[^\n]\n", functionCalled, parameter);
+            parameter[strcspn(parameter, "\r")] = '\0'; //retire l'éventuel "\n"
+
+            //Je teste toutes les fonctions possibles à appeler
+            if (strcmp(functionCalled, "findByDirector") == 0) {
+                findByDirector(parameter, lib);
+                clearInput(); //removes the ready.txt and the results.txt
+            }
+            if (strcmp(functionCalled, "findByGenre") == 0) {
+                findByGenre(parameter, genres);
+                clearInput();
+            }
+            if (strcmp(functionCalled, "findByDuration") == 0) {
+                findByDuration(atoi(parameter), timeArray);
+                clearInput();
+            }
+            if (strcmp(functionCalled, "randomFilm") == 0) {
+                randomFilm(films);
+                clearInput();
+            }
+            if (strcmp(functionCalled, "allDirectors") == 0) {
+                allDirectors(lib);
+                clearInput();
+            }
+            if (strcmp(functionCalled, "printTopDirector") == 0) {
+                printTopDirector(lib);
+                clearInput();
+            }
+            if (strcmp(functionCalled, "deleteDatabase") == 0){
+                printf("Databsase clear procedure intialized");
+                stopInit = true; //will stop the infinite loop after the database have been cleared
+                freeTimeArray(timeArray);
+                deleteHashTableFilm(&films);
+                deleteHashTableFilm(&genres);
+                deleteHashTable(&lib);
+            }
+            //Clear the input to avoid artefacts
+            memset(functionCalled, '\0', sizeof(char) * 32);
+            memset(parameter, '\0', sizeof(char) * 32);
+        }
+        //J'ai lu toute la requête, je peux la supprimer
+        remove("request.txt");
+        fclose(request);
+    }
+    //END
 
 return 0;
 }
 
-void testHashTableIDirector(){
-
-    struct HashTable* h1 = createEmptyHashTable(BUCKET_SIZE);
-    insert(h1, "Bob", "Vroum", 150, "Comedy");
-    insert(h1, "Bob", "Papacito", 11, "Drouate");
-    insert(h1, "Alex", "Malo", 2, "Drama");
-    insert(h1, "Roger", "camp", 2, "Drama");
-    insert(h1, "Mina", "rat", 2, "Drama");
-    insert(h1, "Jeanne", "papr", 2, "Drama");
-
-    printHashTable(h1);
-    printListFilm(h1->table[4]->head->films);
-
-    deleteHashTable(&h1);
-
-}
Index: hashTableFilmList.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by nirin on 5/12/2023.\r\n//\r\n\r\n#include \"hashTableFilmList.h\"\r\n\r\n\r\nstruct HashTableFilm* createEmptyHashTableFilm(unsigned int buckets){\r\n    struct HashTableFilm* h1 = malloc(sizeof(struct HashTableFilm));\r\n    if(h1 == NULL){\r\n        printf(\"malloc error\");\r\n        return h1;\r\n    }\r\n    h1->buckets = buckets;\r\n    h1->items = 0;\r\n    h1->table = malloc(buckets*sizeof(struct ListFilm*));\r\n\r\n}\r\nbool isHashTableEmptyFilm(struct HashTableFilm* ht){\r\n    if(ht == NULL){\r\n        return true;\r\n    }\r\n    else return false;\r\n}\r\n\r\nunsigned int hashTableElementsFilm(struct HashTableFilm* ht){\r\n    if(isHashTableEmptyFilm(ht)){\r\n        return 0;\r\n    }\r\n    return ht->items;\r\n    \r\n}\r\n\r\nint hash_functionFilm(struct HashTableFilm* ht, char* genre){\r\n    unsigned long hash = 5381;\r\n    int c;\r\n\r\n    while (c = *genre++)\r\n        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */\r\n\r\n    return hash%ht->buckets;\r\n}\r\n\r\nbool insertFilmRead(struct HashTableFilm* ht, char* title, int duration, char* genre){\r\n    if(isHashTableEmptyFilm(ht)){\r\n        return false;\r\n    }\r\n    int hashedValue = hash_functionFilm(ht, genre);\r\n    if(ht->table[hashedValue] == NULL){ //vide, créer la liste et insérer la valeur\r\n\r\n        ht->table[hashedValue] = createEmptyListFilm();\r\n        addFirstFilm(ht->table[hashedValue], title, duration, genre);\r\n        ht->items++;\r\n        return true;\r\n\r\n    }\r\n    else { //Il y a collision mais le directeur n'appartient pas\r\n        addFirstFilm(ht->table[hashedValue], title, duration, genre);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n\r\nvoid printHashTableFilm(struct HashTableFilm* ht){\r\n    if(isHashTableEmptyFilm(ht)){\r\n        printf(\"HashTable Empty\");\r\n        return;\r\n    }\r\n    for(int i = 0; i < ht->buckets; i++){\r\n        printf(\"%d: \", i);\r\n        if(ht->table[i] == NULL){\r\n            printf(\"\\n\");\r\n        }\r\n        else printListFilm(ht->table[i]);\r\n\r\n    }\r\n}\r\n\r\nbool existsFilm(struct HashTableFilm* ht, char* genre){\r\n    int hash = hash_functionFilm(ht, genre);\r\n    if(ht->table[hash] == NULL){\r\n        return false;\r\n    }\r\n    else return true;\r\n}\r\n\r\n\r\n\r\nvoid deleteHashTableFilm(struct HashTableFilm** ht){\r\n    if(isHashTableEmptyFilm(*ht)){\r\n        printf(\"HT empty\");\r\n        return;\r\n    }\r\n\r\n    for(int i = 0; i < (*ht)->buckets; i++){\r\n        deleteListFilm(&(*ht)->table[i]);\r\n    }\r\n    free((*ht)->table);\r\n    free(*ht);\r\n    ht = NULL;\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hashTableFilmList.c b/hashTableFilmList.c
--- a/hashTableFilmList.c	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/hashTableFilmList.c	(date 1686486624619)
@@ -31,16 +31,20 @@
     
 }
 
-int hash_functionFilm(struct HashTableFilm* ht, char* genre){
+int hash_functionFilm(struct HashTableFilm* ht, char* title){
     unsigned long hash = 5381;
     int c;
 
-    while (c = *genre++)
+    while (c = *title++)
         hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 
     return hash%ht->buckets;
 }
 
+int hash_functionGenre(struct HashTableFilm* ht, char* genre){
+    return genre[0];
+}
+
 bool insertFilmRead(struct HashTableFilm* ht, char* title, int duration, char* genre){
     if(isHashTableEmptyFilm(ht)){
         return false;
@@ -54,12 +58,43 @@
         return true;
 
     }
-    else { //Il y a collision mais le directeur n'appartient pas
+    else { //Il y a collision
         addFirstFilm(ht->table[hashedValue], title, duration, genre);
         return true;
     }
     return false;
 }
+
+bool insertFilmGenre(struct HashTableFilm* ht, char* genre, int duration, char* title){ //Fonction insertion pour le genre
+    if(isHashTableEmptyFilm(ht)){
+        return false;
+    }
+    int hashedValue = hash_functionGenre(ht, genre);
+    if(ht->table[hashedValue] == NULL){ //vide, créer la liste et insérer la valeur
+
+        ht->table[hashedValue] = createEmptyListFilm();
+        addFirstFilm(ht->table[hashedValue], title, duration, genre);
+        ht->items++;
+        return true;
+
+    }
+    else { //Il y a collision, je dois ajouter le film de manière triée, il n'y a pas de mélange de genre ayant le même hash
+        struct CellFilm* iter = ht->table[hashedValue]->head;
+        int pos = 0;
+        while(strcmp(iter->genre, genre) != 0 && iter->next != NULL){ //Je cherche la première occurence du genre
+            iter = iter->next;
+            pos++;
+        }
+        if(pos == 0){ //La genre recherché est au début de la liste
+            addFirstFilm(ht->table[hashedValue], title, duration, genre);
+        }
+        else{ //Le genre recherché est à la position "pos" dans la liste
+            bool valid = true;
+            addItemPosFilm(ht->table[hashedValue], title, duration, genre, pos, &valid);
+        }
+    }
+    return false;
+}
 
 
 
Index: cmake-build-debug/results.txt
===================================================================
diff --git a/cmake-build-debug/results.txt b/cmake-build-debug/results.txt
deleted file mode 100644
--- a/cmake-build-debug/results.txt	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ /dev/null	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
@@ -1,138 +0,0 @@
-0
-The Amulet of Wolfhound;132;Thriller
-Across the Clocktower;132;Musical
-The Dawn Will Be Third;132;Science Fiction
-A Rabbit Laughed;132;Science Fiction
-Damnation and Gunfighter;132;Sports
-The Cog From;132;Fantasy
-The Priceless Revolutions;132;Sports
-The Slab and the Weird Nightmare;132;Documentary
-Mozart, the Beast What Waits;132;Horror
-At the Hidden Escape;132;Animation
-James, the Gentleman Case;132;Action
-Norths and Foxs ;132;Suspense
-The Pilgrim Tomb;132;Suspense
-The New Stranger Above the Mistletoe;132;Action
-Gentlewomans and Trails ;132;Action
-Black Owning;132;Educational
-The Island Is Brass;132;Comedy
-Forces and Pragues ;132;Drama
-Plague Detective;132;Romance
-Jailer Changing;132;Suspense
-The Ash Across;132;War
-Parlours and Dwellers ;132;Thriller
-The Great Automaton;132;Action
-The Priceless Goblins's Chance;132;Musical
-Nomadic Suicide;132;Comedy
-Pain of Circus;132;Suspense
-Charles, the Compendium Player;132;Sports
-Sip and the Sky Kitchen;132;Animation
-Beasts and Ghouls ;132;Suspense
-Tomb's Daylight Prey;132;Parody
-The Link and the Steel Modern;132;Adventure
-Ruler Laughing;132;Comedy
-Human and the Seventh Options;132;Adventure
-Mozart, the Abbey Health;132;Superhero
-The Eons Out Of;132;Action
-The Call and the Eater;132;Superhero
-Without the Lead Awakening;132;Sports
-The Stranger On;132;Disaster
-The Steampunk Door's Ghost;132;Drama
-The Bishop Sky;132;Drama
-Mirror Faerie;132;Disaster
-The Spare Plants;132;Mystery
-Honor and the Broken Woods;132;Animation
-The Ring Skunk;132;Thriller
-Maria, the Corset Journey;132;Sports
-The Soul-Men;132;Western
-The English Hieroglyphs;132;Documentary
-Name of Ultimate Ruler;132;Mystery
-The Moonlit Cemetery;132;Horror
-People Hare;132;Suspense
-A Tale Spoke;132;Sports
-Escape and a Opportunity;132;Action
-On the Game and the Gentlewoman;132;Thriller
-The MonsterParlour;132;Fantasy
-The Damnation Bridge;132;Thriller
-The Invisible Amulet In the Voice;132;Thriller
-The Aztec Murder Well;132;Romance
-The Bloodline and the Space Cowboy;132;Fantasy
-Fallen Spaces;132;Educational
-The Gothic Hordes;132;Adventure
-The Comet the Device Lied;132;Mystery
-A Joan of Arc Forgot;132;Science Fiction
-The Corrupt Dragon Priestess;132;Musical
-The Card;132;Animation
-The Reaper of Merlin;132;Mystery
-Horror and Hall;132;Educational
-The Amazing Revolution;132;Disaster
-Beast's Grey Cabinet;132;Comedy
-The Atomic Zeppelin's Window;132;Thriller
-The Scream and the Hairy Bomb;132;Parody
-The Muddy Nightmares;132;Suspense
-City Riding;132;Drama
-The Infernal Emperors;132;Crime
-The Thing Beyond the Jailer;132;Documentary
-The Leviathan of Grace;132;Science Fiction
-Sleep of the Chicago;132;Parody
-The Corset and the Imitation Season;132;Thriller
-Step and a Wish;132;Musical
-A North Changed;132;Adventure
-The Dome Gold;132;Romance
-The Call of Captain Nemo;132;Parody
-The Blade and the Steam-Powered Basket;132;Western
-Monster and the Northern Steel;132;Sports
-Bridges and Equations ;132;Musical
-Unfaithful Case;132;Science Fiction
-The Suicide South;132;War
-The Water and the Machine;132;Superhero
-Gentleman and the Bad Pirate;132;Parody
-The Violet Women Master;132;Superhero
-Patch and Ether;132;Adventure
-The First Discoverys;132;Fantasy
-Mars of the Garden;132;Musical
-The Punch Was Not Silver;132;Animation
-At the Orange Door;132;Romance
-Bullet of Creek;132;Musical
-The Ruler Without the Pilgrim;132;Action
-The Night From;132;Documentary
-Woman Engine;132;Drama
-At the Punch and the Light;132;Animation
-Cloven Hoof's Jailer;132;Documentary
-Dust of Spare Bookkeeper;132;Romance
-Sipless;132;Educational
-The Card-Dream;132;Sports
-Thing of the Joan of Arc;132;Animation
-Accusing Letters;132;Mystery
-The Sleeper Mars;132;Crime
-Punch's Underwater Gunfighter;132;Parody
-The Built Emperor;132;Romance
-The Curse of Sorcery;132;Parody
-The Corpse and the Scar;132;War
-The Path Sword;132;Disaster
-The Sea Into;132;Educational
-The Stole Blight;132;Educational
-Courts and Skulls ;132;Parody
-The Horror the Hieroglyph Dragged;132;Science Fiction
-The Horror of Bluebeard;132;Thriller
-The Cabinet the Iron Rode;132;Animation
-The Jackal Will Be Next;132;War
-Touch Phantom;132;Sports
-The Us of Alexander;132;Adventure
-The Beast the Beast Stole;132;Adventure
-The Secret of Bat;132;Animation
-The Ninth Eater's Creek;132;Mystery
-Yellow Book;132;Comedy
-Playerless;132;Animation
-Without the Warlord;132;Adventure
-From the Cog and the Rabbit;132;Mystery
-The Opportunity and the Us;132;Drama
-The Poisoned Feet Bridge;132;Disaster
-The Fought Terror;132;Action
-The Mesa Will Be Twenty;132;Superhero
-Revenge and the Western Wish;132;Drama
-Express's Final Light;132;Parody
-A Toad Fell;132;Crime
-At the Jewels;132;Horror
-City Elysium;132;Documentary
-The Big Fog;132;Comedy
\ No newline at end of file
Index: listDirector.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"listDirector.h\"\r\n\r\nstruct Director* createCellDirector(char* name){\r\n    struct Director* d = malloc(sizeof(struct Director));\r\n    if(d != NULL){\r\n        d->name = malloc(sizeof(char)*(strlen(name) + 1));\r\n        strcpy(d->name, name);\r\n\r\n        d->nmbFilm = 0;\r\n\r\n        d->films = malloc(50*sizeof(struct ListFilm*)); //Par défaut, une réalisateur à 50 films par défaut\r\n    }\r\n    return d;\r\n}\r\nstruct ListDirector* createEmptyListDirector(){\r\n\r\n    struct ListDirector* l1 = malloc(sizeof(struct ListDirector));\r\n    if(l1==NULL){\r\n        printf(\"malloc error\");\r\n        return l1;\r\n    }\r\n    l1->size = 0;\r\n    l1->head = NULL;\r\n\r\n    return l1;\r\n}\r\n\r\nvoid addFirstDirector(struct ListDirector* l, char* name){\r\n    struct Director* newLHead = createCellDirector(name);\r\n    if(newLHead==NULL){\r\n        printf(\"head malloc error\");\r\n    }\r\n\r\n    newLHead -> next = l->head;\r\n    l->head = newLHead;\r\n    l->size++;\r\n}\r\n\r\nbool isListEmptyDirector(struct ListDirector* l){\r\n    if(l == NULL){\r\n    return true;\r\n    }\r\n    else return false;\r\n}\r\n\r\n\r\nstruct Director* getItemPosDirector(struct ListDirector* l, unsigned int position, bool* valid){\r\n    //here, the position in the exact index of the cell in the lise. No need of -1 position\r\n    if(isListEmptyDirector(l)){\r\n        printf(\"list empty\");\r\n        *valid = false;\r\n        return NULL;\r\n    }\r\n\r\n    if(position >= l->size){\r\n        *valid = false;\r\n    }\r\n\r\n    int i = 0;\r\n    struct Director* iter = l->head;\r\n    while(i <= position-1){\r\n        iter = iter->next;\r\n        i++;\r\n    }\r\n    *valid = true;\r\n    return iter;\r\n}\r\n\r\n\r\nvoid deleteFirstDirector(struct ListDirector* l){\r\n\r\n    if (!isListEmptyDirector(l)) {\r\n        struct Director* newHead = l->head->next;\r\n        deleteListFilm(&l->head->films);\r\n        free(l->head->name);\r\n        free(l->head);\r\n        l->head = newHead;\r\n        l->size--;\r\n        return;\r\n    }\r\n}\r\n\r\nvoid printListDirector(struct ListDirector* l){\r\n\r\n    if(isListEmptyDirector(l)){\r\n        printf(\"List is empty :(\\n\");\r\n        return;\r\n    }\r\n\r\n    unsigned int size = l->size;\r\n    struct Director* iter = l->head;\r\n\r\n    for(int i = 0; i < size; i++){\r\n        printf(\" -> \");\r\n        printf(\"Director: %s - NumberFilm: %d\", iter->name, iter->nmbFilm);\r\n        iter = iter->next;\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\r\nunsigned int listSizeDirector(struct ListDirector* l){\r\n    return l->size;\r\n}\r\n\r\nvoid addItemPosDirector(struct ListDirector* l, char* name, unsigned int position, bool* valid){\r\n\r\n    unsigned int size = listSizeDirector(l);\r\n\r\n    if(position > size){\r\n        printf(\"List empty :( or out of range\");\r\n        *valid = false;\r\n        return;\r\n    }\r\n\r\n    if(position==0){\r\n        addFirstDirector(l, name);\r\n        if(size == listSizeDirector(l)){\r\n            *valid = false;\r\n            return;\r\n        } //même taille, addFrist n'a pas marché\r\n        else{\r\n            *valid = true;\r\n            return;\r\n        }\r\n    }\r\n\r\n    struct Director* newCell = createCellDirector(name); //je créer la cellule a ajouter\r\n    if(newCell == NULL){\r\n        printf(\"Malloc Error !\");\r\n        *valid = false;\r\n        return;\r\n\r\n    }\r\n\r\n    struct Director* iter = l->head;\r\n    int i = 0;\r\n    while(i < position-1){ // se décale juqsu'à pos-1\r\n        if(iter == NULL){\r\n            printf(\"Hole in the list !\");\r\n            *valid = false;\r\n            return;\r\n        }\r\n        iter = iter->next;\r\n        i++;\r\n    }\r\n    //connecte nouvelle cellule et pos\r\n    newCell -> next = iter -> next;\r\n    iter -> next = newCell;\r\n    l->size++;\r\n    *valid = true;\r\n\r\n}\r\n\r\nvoid deleteItemPosDirector(struct ListDirector* l, unsigned int position, bool* valid){\r\n\r\n    if(isListEmptyDirector(l) || position > listSizeDirector(l)){\r\n        printf(\"Error, list empty or position out of range\");\r\n        *valid = false;\r\n        return;\r\n    }\r\n\r\n    if(position == 0){ //if you want to delete the head\r\n        return deleteFirstDirector(l);\r\n    }\r\n\r\n    struct Director* iter = l->head;\r\n    int i = 0;\r\n    while(i < position-1) {\r\n        iter = iter -> next;\r\n        i++;\r\n    }\r\n\r\n    struct Director* temp = iter -> next; // enregistre le pont à pos-1\r\n    iter->next = iter->next->next;\r\n    l->size--;\r\n    *valid = true;\r\n\r\n    //free the array deleted form the list\r\n    free(temp);\r\n\r\n}\r\n\r\nvoid deleteListDirector(struct ListDirector** l){\r\n\r\n        if(isListEmptyDirector(*l)){\r\n            free(*l);\r\n            return;\r\n        }\r\n        unsigned int size = listSizeDirector(*l);\r\n        for(int i = 0; i < size; i++){\r\n            deleteFirstDirector(*l);\r\n        }\r\n\r\n        free(*l);\r\n        *l = NULL;\r\n}\r\n\r\n\r\nstruct Director* directorBelongs(struct ListDirector* l, char* name){\r\n    if(isListEmptyDirector(l)){\r\n        printf(\"List empty man\");\r\n        return NULL;\r\n    }\r\n\r\n    unsigned int size = listSizeDirector(l);\r\n    struct Director* iter = l->head;\r\n\r\n    for(int i = 0; i < size; i++){\r\n        if(strcmp(iter->name, name) == 0){\r\n            return iter;\r\n        }\r\n        else{\r\n            iter = iter->next;\r\n        }\r\n    }// rien n'est trouvé\r\n    return NULL;\r\n}\r\n\r\nstruct Director* topDirector(struct ListDirector* ld){\r\n    return ld->topDirector;\r\n}\r\n\r\n\r\n\r\nint getPosItemDirector(struct ListDirector* l, char* name){\r\n    if(isListEmptyDirector(l)){\r\n        printf(\"list empty\");\r\n        return 0;\r\n    }\r\n\r\n    int i = 0;\r\n    struct Director* iter = l->head;\r\n    while(strcmp(iter->name, name) != 0){\r\n        iter = iter->next;\r\n        i++;\r\n    }\r\n    return i;\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/listDirector.c b/listDirector.c
--- a/listDirector.c	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/listDirector.c	(date 1686481640736)
@@ -216,8 +216,8 @@
     return NULL;
 }
 
-struct Director* topDirector(struct ListDirector* ld){
-    return ld->topDirector;
+struct Director* topDirector(struct HashTable* ht){
+    return ht->topDirector;
 }
 
 
Index: databaseInit.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n#ifndef C_FILM_H\r\n#define C_FILM_H\r\n#include \"listDirector.h\"\r\n#include \"listFilm.h\"\r\n#include \"hashTableDirectorList.h\"\r\n#include \"hashTableFilmList.h\"\r\n#include <string.h>\r\n#include <time.h>\r\n#include <stdlib.h>\r\n\r\n\r\n\r\n\r\nstruct HashTable* readDirectors(char* fileName, struct ListFilm** timeArray, struct HashTableFilm* genreTable, struct HashTableFilm* filmTable);\r\nstruct CellFilm** timeArray(char* fileName);\r\nvoid findByDirector(char* director);\r\nvoid findByGenre(char* genre);\r\nvoid findByDuration(int duration);\r\nvoid randomFilm();\r\n\r\n\r\n#endif //C_FILM_H\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/databaseInit.h b/databaseInit.h
--- a/databaseInit.h	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/databaseInit.h	(date 1686494323902)
@@ -14,10 +14,14 @@
 
 struct HashTable* readDirectors(char* fileName, struct ListFilm** timeArray, struct HashTableFilm* genreTable, struct HashTableFilm* filmTable);
 struct CellFilm** timeArray(char* fileName);
-void findByDirector(char* director);
-void findByGenre(char* genre);
-void findByDuration(int duration);
-void randomFilm();
-
+void findByDirector(char* director, struct HashTable* ht);
+void findByGenre(char* genre, struct HashTableFilm* genres);
+void findByDuration(int duration, struct ListFilm** timeArray);
+void randomFilm(struct HashTableFilm* films);
+void allDirectors(struct HashTable* dir);
+void printTopDirector(struct HashTable* dir);
+void clearInput();
+void addFilm(struct HashTableFilm* films, struct HashTable* directors, char* director, char* genre, char* title, int duration);
+void createAccount(char* hashUser, char* hashPass);
 
 #endif //C_FILM_H
Index: listDirector.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n#ifndef DIRECTOR\r\n#define DIRECTOR\r\n#include <stdio.h>\r\n#include <stdbool.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include \"listFilm.h\"\r\n\r\n\r\nstruct Director {\r\n    char* name;\r\n    int nmbFilm;\r\n    struct ListFilm* films;\r\n    struct Director* next;\r\n};\r\n\r\nstruct ListDirector{\r\n    int size;\r\n    struct Director* head;\r\n    struct Director* topDirector;\r\n};\r\n\r\nstruct Director* createCellDirector(char* name);\r\nstruct ListDirector* createEmptyListDirector();\r\nvoid addFirstDirector(struct ListDirector* l, char* name);\r\nbool isListEmptyDirector(struct ListDirector* l);\r\nstruct Director* getItemPosDirector(struct ListDirector* l, unsigned int position, bool* valid);\r\nvoid deleteFirstDirector(struct ListDirector* l);\r\nvoid printListDirector(struct ListDirector* l);\r\nunsigned int listSizeDirector(struct ListDirector* l);\r\nvoid addItemPosDirector(struct ListDirector* l, char* name, unsigned int position, bool* valid);\r\nvoid deleteItemPosDirector(struct ListDirector* l, unsigned int position, bool* valid);\r\nvoid deleteListDirector(struct ListDirector** l);\r\nstruct Director* directorBelongs(struct ListDirector* l, char* name);\r\nstruct Director* topDirector(struct ListDirector* ld);\r\nint getPosItemDirector(struct ListDirector*l, char* name);\r\n\r\n\r\n#endif\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/listDirector.h b/listDirector.h
--- a/listDirector.h	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/listDirector.h	(date 1686481640729)
@@ -7,6 +7,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include "listFilm.h"
+#include "hashTableDirectorList.h"
 
 
 struct Director {
@@ -19,7 +20,6 @@
 struct ListDirector{
     int size;
     struct Director* head;
-    struct Director* topDirector;
 };
 
 struct Director* createCellDirector(char* name);
@@ -34,7 +34,7 @@
 void deleteItemPosDirector(struct ListDirector* l, unsigned int position, bool* valid);
 void deleteListDirector(struct ListDirector** l);
 struct Director* directorBelongs(struct ListDirector* l, char* name);
-struct Director* topDirector(struct ListDirector* ld);
+struct Director* topDirector(struct HashTable* ht);
 int getPosItemDirector(struct ListDirector*l, char* name);
 
 
Index: accountManagement.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/accountManagement.h b/accountManagement.h
new file mode 100644
--- /dev/null	(date 1686494323518)
+++ b/accountManagement.h	(date 1686494323518)
@@ -0,0 +1,8 @@
+//
+// Created by nirin on 11/06/2023.
+//
+
+#ifndef C_ACCOUNTMANAGEMENT_H
+#define C_ACCOUNTMANAGEMENT_H
+
+#endif //C_ACCOUNTMANAGEMENT_H
Index: cmake-build-debug/c.cbp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<CodeBlocks_project_file>\r\n\t<FileVersion major=\"1\" minor=\"6\"/>\r\n\t<Project>\r\n\t\t<Option title=\"c\"/>\r\n\t\t<Option makefile_is_custom=\"1\"/>\r\n\t\t<Option compiler=\"gcc\"/>\r\n\t\t<Option virtualFolders=\"CMake Files\\;\"/>\r\n\t\t<Build>\r\n\t\t\t<Target title=\"all\">\r\n\t\t\t\t<Option working_dir=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug\"/>\r\n\t\t\t\t<Option type=\"4\"/>\r\n\t\t\t\t<MakeCommands>\r\n\t\t\t\t\t<Build command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 all\"/>\r\n\t\t\t\t\t<CompileFile command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\r\n\t\t\t\t\t<Clean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t\t<DistClean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t</MakeCommands>\r\n\t\t\t</Target>\r\n\t\t\t<Target title=\"rebuild_cache\">\r\n\t\t\t\t<Option working_dir=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug\"/>\r\n\t\t\t\t<Option type=\"4\"/>\r\n\t\t\t\t<MakeCommands>\r\n\t\t\t\t\t<Build command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 rebuild_cache\"/>\r\n\t\t\t\t\t<CompileFile command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\r\n\t\t\t\t\t<Clean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t\t<DistClean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t</MakeCommands>\r\n\t\t\t</Target>\r\n\t\t\t<Target title=\"edit_cache\">\r\n\t\t\t\t<Option working_dir=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug\"/>\r\n\t\t\t\t<Option type=\"4\"/>\r\n\t\t\t\t<MakeCommands>\r\n\t\t\t\t\t<Build command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 edit_cache\"/>\r\n\t\t\t\t\t<CompileFile command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\r\n\t\t\t\t\t<Clean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t\t<DistClean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t</MakeCommands>\r\n\t\t\t</Target>\r\n\t\t\t<Target title=\"c\">\r\n\t\t\t\t<Option output=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/c\" prefix_auto=\"0\" extension_auto=\"0\"/>\r\n\t\t\t\t<Option working_dir=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug\"/>\r\n\t\t\t\t<Option object_output=\"./\"/>\r\n\t\t\t\t<Option type=\"1\"/>\r\n\t\t\t\t<Option compiler=\"gcc\"/>\r\n\t\t\t\t<Compiler>\r\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-linux-gnu/10/include\"/>\r\n\t\t\t\t\t<Add directory=\"/usr/local/include\"/>\r\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\r\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\r\n\t\t\t\t</Compiler>\r\n\t\t\t\t<MakeCommands>\r\n\t\t\t\t\t<Build command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 c\"/>\r\n\t\t\t\t\t<CompileFile command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\r\n\t\t\t\t\t<Clean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t\t<DistClean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t</MakeCommands>\r\n\t\t\t</Target>\r\n\t\t\t<Target title=\"c/fast\">\r\n\t\t\t\t<Option output=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/c\" prefix_auto=\"0\" extension_auto=\"0\"/>\r\n\t\t\t\t<Option working_dir=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug\"/>\r\n\t\t\t\t<Option object_output=\"./\"/>\r\n\t\t\t\t<Option type=\"1\"/>\r\n\t\t\t\t<Option compiler=\"gcc\"/>\r\n\t\t\t\t<Compiler>\r\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-linux-gnu/10/include\"/>\r\n\t\t\t\t\t<Add directory=\"/usr/local/include\"/>\r\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\r\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\r\n\t\t\t\t</Compiler>\r\n\t\t\t\t<MakeCommands>\r\n\t\t\t\t\t<Build command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 c/fast\"/>\r\n\t\t\t\t\t<CompileFile command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\r\n\t\t\t\t\t<Clean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t\t<DistClean command=\"/usr/bin/gmake -j20 -f &quot;/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\r\n\t\t\t\t</MakeCommands>\r\n\t\t\t</Target>\r\n\t\t</Build>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.c\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.h\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.c\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.c\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.h\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.c\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.c\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/main.c\">\r\n\t\t\t<Option target=\"c\"/>\r\n\t\t</Unit>\r\n\t\t<Unit filename=\"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/CMakeLists.txt\">\r\n\t\t\t<Option virtualFolder=\"CMake Files\\\"/>\r\n\t\t</Unit>\r\n\t</Project>\r\n</CodeBlocks_project_file>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/c.cbp b/cmake-build-debug/c.cbp
--- a/cmake-build-debug/c.cbp	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/c.cbp	(date 1686494339366)
@@ -76,6 +76,12 @@
 				</MakeCommands>
 			</Target>
 		</Build>
+		<Unit filename="/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/accountManagement.c">
+			<Option target="c"/>
+		</Unit>
+		<Unit filename="/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/accountManagement.h">
+			<Option target="c"/>
+		</Unit>
 		<Unit filename="/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.c">
 			<Option target="c"/>
 		</Unit>
Index: accountManagement.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/accountManagement.c b/accountManagement.c
new file mode 100644
--- /dev/null	(date 1686494323505)
+++ b/accountManagement.c	(date 1686494323505)
@@ -0,0 +1,5 @@
+//
+// Created by nirin on 11/06/2023.
+//
+
+#include "accountManagement.h"
Index: cmake-build-debug/Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># CMAKE generated file: DO NOT EDIT!\r\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.18\r\n\r\n# Default target executed when no arguments are given to make.\r\ndefault_target: all\r\n\r\n.PHONY : default_target\r\n\r\n# Allow only one \"make -f Makefile2\" at a time, but pass parallelism.\r\n.NOTPARALLEL:\r\n\r\n\r\n#=============================================================================\r\n# Special targets provided by cmake.\r\n\r\n# Disable implicit rules so canonical targets will work.\r\n.SUFFIXES:\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : %,v\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : RCS/%\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : RCS/%,v\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : SCCS/s.%\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : s.%\r\n\r\n\r\n.SUFFIXES: .hpux_make_needs_suffix_list\r\n\r\n\r\n# Command-line flag to silence nested $(MAKE).\r\n$(VERBOSE)MAKESILENT = -s\r\n\r\n#Suppress display of executed commands.\r\n$(VERBOSE).SILENT:\r\n\r\n# A target that is always out of date.\r\ncmake_force:\r\n\r\n.PHONY : cmake_force\r\n\r\n#=============================================================================\r\n# Set environment variables for the build.\r\n\r\n# The shell in which to execute make rules.\r\nSHELL = /bin/sh\r\n\r\n# The CMake executable.\r\nCMAKE_COMMAND = /usr/bin/cmake\r\n\r\n# The command to remove a file.\r\nRM = /usr/bin/cmake -E rm -f\r\n\r\n# Escaping for special characters.\r\nEQUALS = =\r\n\r\n# The top-level source directory on which CMake was run.\r\nCMAKE_SOURCE_DIR = /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c\r\n\r\n# The top-level build directory on which CMake was run.\r\nCMAKE_BINARY_DIR = /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug\r\n\r\n#=============================================================================\r\n# Targets provided globally by CMake.\r\n\r\n# Special rule for the target rebuild_cache\r\nrebuild_cache:\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan \"Running CMake to regenerate build system...\"\r\n\t/usr/bin/cmake --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)\r\n.PHONY : rebuild_cache\r\n\r\n# Special rule for the target rebuild_cache\r\nrebuild_cache/fast: rebuild_cache\r\n\r\n.PHONY : rebuild_cache/fast\r\n\r\n# Special rule for the target edit_cache\r\nedit_cache:\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan \"No interactive CMake dialog available...\"\r\n\t/usr/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.\r\n.PHONY : edit_cache\r\n\r\n# Special rule for the target edit_cache\r\nedit_cache/fast: edit_cache\r\n\r\n.PHONY : edit_cache/fast\r\n\r\n# The main all target\r\nall: cmake_check_build_system\r\n\t$(CMAKE_COMMAND) -E cmake_progress_start /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug//CMakeFiles/progress.marks\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 all\r\n\t$(CMAKE_COMMAND) -E cmake_progress_start /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles 0\r\n.PHONY : all\r\n\r\n# The main clean target\r\nclean:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 clean\r\n.PHONY : clean\r\n\r\n# The main clean target\r\nclean/fast: clean\r\n\r\n.PHONY : clean/fast\r\n\r\n# Prepare targets for installation.\r\npreinstall: all\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall\r\n.PHONY : preinstall\r\n\r\n# Prepare targets for installation.\r\npreinstall/fast:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall\r\n.PHONY : preinstall/fast\r\n\r\n# clear depends\r\ndepend:\r\n\t$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1\r\n.PHONY : depend\r\n\r\n#=============================================================================\r\n# Target rules for targets named c\r\n\r\n# Build rule for target.\r\nc : cmake_check_build_system\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 c\r\n.PHONY : c\r\n\r\n# fast build rule for target.\r\nc/fast:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/build\r\n.PHONY : c/fast\r\n\r\ndatabaseInit.o: databaseInit.c.o\r\n\r\n.PHONY : databaseInit.o\r\n\r\n# target to build an object file\r\ndatabaseInit.c.o:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/databaseInit.c.o\r\n.PHONY : databaseInit.c.o\r\n\r\ndatabaseInit.i: databaseInit.c.i\r\n\r\n.PHONY : databaseInit.i\r\n\r\n# target to preprocess a source file\r\ndatabaseInit.c.i:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/databaseInit.c.i\r\n.PHONY : databaseInit.c.i\r\n\r\ndatabaseInit.s: databaseInit.c.s\r\n\r\n.PHONY : databaseInit.s\r\n\r\n# target to generate assembly for a file\r\ndatabaseInit.c.s:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/databaseInit.c.s\r\n.PHONY : databaseInit.c.s\r\n\r\nhashTableDirectorList.o: hashTableDirectorList.c.o\r\n\r\n.PHONY : hashTableDirectorList.o\r\n\r\n# target to build an object file\r\nhashTableDirectorList.c.o:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/hashTableDirectorList.c.o\r\n.PHONY : hashTableDirectorList.c.o\r\n\r\nhashTableDirectorList.i: hashTableDirectorList.c.i\r\n\r\n.PHONY : hashTableDirectorList.i\r\n\r\n# target to preprocess a source file\r\nhashTableDirectorList.c.i:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/hashTableDirectorList.c.i\r\n.PHONY : hashTableDirectorList.c.i\r\n\r\nhashTableDirectorList.s: hashTableDirectorList.c.s\r\n\r\n.PHONY : hashTableDirectorList.s\r\n\r\n# target to generate assembly for a file\r\nhashTableDirectorList.c.s:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/hashTableDirectorList.c.s\r\n.PHONY : hashTableDirectorList.c.s\r\n\r\nhashTableFilmList.o: hashTableFilmList.c.o\r\n\r\n.PHONY : hashTableFilmList.o\r\n\r\n# target to build an object file\r\nhashTableFilmList.c.o:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/hashTableFilmList.c.o\r\n.PHONY : hashTableFilmList.c.o\r\n\r\nhashTableFilmList.i: hashTableFilmList.c.i\r\n\r\n.PHONY : hashTableFilmList.i\r\n\r\n# target to preprocess a source file\r\nhashTableFilmList.c.i:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/hashTableFilmList.c.i\r\n.PHONY : hashTableFilmList.c.i\r\n\r\nhashTableFilmList.s: hashTableFilmList.c.s\r\n\r\n.PHONY : hashTableFilmList.s\r\n\r\n# target to generate assembly for a file\r\nhashTableFilmList.c.s:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/hashTableFilmList.c.s\r\n.PHONY : hashTableFilmList.c.s\r\n\r\nlistDirector.o: listDirector.c.o\r\n\r\n.PHONY : listDirector.o\r\n\r\n# target to build an object file\r\nlistDirector.c.o:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/listDirector.c.o\r\n.PHONY : listDirector.c.o\r\n\r\nlistDirector.i: listDirector.c.i\r\n\r\n.PHONY : listDirector.i\r\n\r\n# target to preprocess a source file\r\nlistDirector.c.i:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/listDirector.c.i\r\n.PHONY : listDirector.c.i\r\n\r\nlistDirector.s: listDirector.c.s\r\n\r\n.PHONY : listDirector.s\r\n\r\n# target to generate assembly for a file\r\nlistDirector.c.s:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/listDirector.c.s\r\n.PHONY : listDirector.c.s\r\n\r\nlistFilm.o: listFilm.c.o\r\n\r\n.PHONY : listFilm.o\r\n\r\n# target to build an object file\r\nlistFilm.c.o:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/listFilm.c.o\r\n.PHONY : listFilm.c.o\r\n\r\nlistFilm.i: listFilm.c.i\r\n\r\n.PHONY : listFilm.i\r\n\r\n# target to preprocess a source file\r\nlistFilm.c.i:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/listFilm.c.i\r\n.PHONY : listFilm.c.i\r\n\r\nlistFilm.s: listFilm.c.s\r\n\r\n.PHONY : listFilm.s\r\n\r\n# target to generate assembly for a file\r\nlistFilm.c.s:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/listFilm.c.s\r\n.PHONY : listFilm.c.s\r\n\r\nmain.o: main.c.o\r\n\r\n.PHONY : main.o\r\n\r\n# target to build an object file\r\nmain.c.o:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/main.c.o\r\n.PHONY : main.c.o\r\n\r\nmain.i: main.c.i\r\n\r\n.PHONY : main.i\r\n\r\n# target to preprocess a source file\r\nmain.c.i:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/main.c.i\r\n.PHONY : main.c.i\r\n\r\nmain.s: main.c.s\r\n\r\n.PHONY : main.s\r\n\r\n# target to generate assembly for a file\r\nmain.c.s:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/main.c.s\r\n.PHONY : main.c.s\r\n\r\n# Help Target\r\nhelp:\r\n\t@echo \"The following are some of the valid targets for this Makefile:\"\r\n\t@echo \"... all (the default if no target is provided)\"\r\n\t@echo \"... clean\"\r\n\t@echo \"... depend\"\r\n\t@echo \"... edit_cache\"\r\n\t@echo \"... rebuild_cache\"\r\n\t@echo \"... c\"\r\n\t@echo \"... databaseInit.o\"\r\n\t@echo \"... databaseInit.i\"\r\n\t@echo \"... databaseInit.s\"\r\n\t@echo \"... hashTableDirectorList.o\"\r\n\t@echo \"... hashTableDirectorList.i\"\r\n\t@echo \"... hashTableDirectorList.s\"\r\n\t@echo \"... hashTableFilmList.o\"\r\n\t@echo \"... hashTableFilmList.i\"\r\n\t@echo \"... hashTableFilmList.s\"\r\n\t@echo \"... listDirector.o\"\r\n\t@echo \"... listDirector.i\"\r\n\t@echo \"... listDirector.s\"\r\n\t@echo \"... listFilm.o\"\r\n\t@echo \"... listFilm.i\"\r\n\t@echo \"... listFilm.s\"\r\n\t@echo \"... main.o\"\r\n\t@echo \"... main.i\"\r\n\t@echo \"... main.s\"\r\n.PHONY : help\r\n\r\n\r\n\r\n#=============================================================================\r\n# Special targets to cleanup operation of make.\r\n\r\n# Special rule to run CMake to check the build system integrity.\r\n# No rule that depends on this can have commands that come from listfiles\r\n# because they might be regenerated.\r\ncmake_check_build_system:\r\n\t$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0\r\n.PHONY : cmake_check_build_system\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/Makefile b/cmake-build-debug/Makefile
--- a/cmake-build-debug/Makefile	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/Makefile	(date 1686494339295)
@@ -142,6 +142,33 @@
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/build
 .PHONY : c/fast
 
+accountManagement.o: accountManagement.c.o
+
+.PHONY : accountManagement.o
+
+# target to build an object file
+accountManagement.c.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/accountManagement.c.o
+.PHONY : accountManagement.c.o
+
+accountManagement.i: accountManagement.c.i
+
+.PHONY : accountManagement.i
+
+# target to preprocess a source file
+accountManagement.c.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/accountManagement.c.i
+.PHONY : accountManagement.c.i
+
+accountManagement.s: accountManagement.c.s
+
+.PHONY : accountManagement.s
+
+# target to generate assembly for a file
+accountManagement.c.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/accountManagement.c.s
+.PHONY : accountManagement.c.s
+
 databaseInit.o: databaseInit.c.o
 
 .PHONY : databaseInit.o
@@ -313,6 +340,9 @@
 	@echo "... edit_cache"
 	@echo "... rebuild_cache"
 	@echo "... c"
+	@echo "... accountManagement.o"
+	@echo "... accountManagement.i"
+	@echo "... accountManagement.s"
 	@echo "... databaseInit.o"
 	@echo "... databaseInit.i"
 	@echo "... databaseInit.s"
Index: cmake-build-debug/Testing/Temporary/LastTest.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Start testing: Jun 11 01:48 CEST\r\n----------------------------------------------------------\r\nEnd testing: Jun 11 01:48 CEST\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/Testing/Temporary/LastTest.log b/cmake-build-debug/Testing/Temporary/LastTest.log
--- a/cmake-build-debug/Testing/Temporary/LastTest.log	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/Testing/Temporary/LastTest.log	(date 1686494340283)
@@ -1,3 +1,3 @@
-Start testing: Jun 11 01:48 CEST
+Start testing: Jun 11 16:38 CEST
 ----------------------------------------------------------
-End testing: Jun 11 01:48 CEST
+End testing: Jun 11 16:38 CEST
Index: cmake-build-debug/CMakeFiles/Makefile2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># CMAKE generated file: DO NOT EDIT!\r\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.18\r\n\r\n# Default target executed when no arguments are given to make.\r\ndefault_target: all\r\n\r\n.PHONY : default_target\r\n\r\n#=============================================================================\r\n# Special targets provided by cmake.\r\n\r\n# Disable implicit rules so canonical targets will work.\r\n.SUFFIXES:\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : %,v\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : RCS/%\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : RCS/%,v\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : SCCS/s.%\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : s.%\r\n\r\n\r\n.SUFFIXES: .hpux_make_needs_suffix_list\r\n\r\n\r\n# Command-line flag to silence nested $(MAKE).\r\n$(VERBOSE)MAKESILENT = -s\r\n\r\n#Suppress display of executed commands.\r\n$(VERBOSE).SILENT:\r\n\r\n# A target that is always out of date.\r\ncmake_force:\r\n\r\n.PHONY : cmake_force\r\n\r\n#=============================================================================\r\n# Set environment variables for the build.\r\n\r\n# The shell in which to execute make rules.\r\nSHELL = /bin/sh\r\n\r\n# The CMake executable.\r\nCMAKE_COMMAND = /usr/bin/cmake\r\n\r\n# The command to remove a file.\r\nRM = /usr/bin/cmake -E rm -f\r\n\r\n# Escaping for special characters.\r\nEQUALS = =\r\n\r\n# The top-level source directory on which CMake was run.\r\nCMAKE_SOURCE_DIR = /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c\r\n\r\n# The top-level build directory on which CMake was run.\r\nCMAKE_BINARY_DIR = /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug\r\n\r\n#=============================================================================\r\n# Directory level rules for the build root directory\r\n\r\n# The main recursive \"all\" target.\r\nall: CMakeFiles/c.dir/all\r\n\r\n.PHONY : all\r\n\r\n# The main recursive \"preinstall\" target.\r\npreinstall:\r\n\r\n.PHONY : preinstall\r\n\r\n# The main recursive \"clean\" target.\r\nclean: CMakeFiles/c.dir/clean\r\n\r\n.PHONY : clean\r\n\r\n#=============================================================================\r\n# Target rules for target CMakeFiles/c.dir\r\n\r\n# All Build rule for target.\r\nCMakeFiles/c.dir/all:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/depend\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/build\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=1,2,3,4,5,6,7 \"Built target c\"\r\n.PHONY : CMakeFiles/c.dir/all\r\n\r\n# Build rule for subdir invocation for target.\r\nCMakeFiles/c.dir/rule: cmake_check_build_system\r\n\t$(CMAKE_COMMAND) -E cmake_progress_start /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles 7\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 CMakeFiles/c.dir/all\r\n\t$(CMAKE_COMMAND) -E cmake_progress_start /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles 0\r\n.PHONY : CMakeFiles/c.dir/rule\r\n\r\n# Convenience name for target.\r\nc : CMakeFiles/c.dir/rule\r\n\r\n.PHONY : c\r\n\r\n# clean rule for target.\r\nCMakeFiles/c.dir/clean:\r\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/clean\r\n.PHONY : CMakeFiles/c.dir/clean\r\n\r\n#=============================================================================\r\n# Special targets to cleanup operation of make.\r\n\r\n# Special rule to run CMake to check the build system integrity.\r\n# No rule that depends on this can have commands that come from listfiles\r\n# because they might be regenerated.\r\ncmake_check_build_system:\r\n\t$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0\r\n.PHONY : cmake_check_build_system\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/Makefile2 b/cmake-build-debug/CMakeFiles/Makefile2
--- a/cmake-build-debug/CMakeFiles/Makefile2	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/Makefile2	(date 1686494339396)
@@ -93,12 +93,12 @@
 CMakeFiles/c.dir/all:
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/depend
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/c.dir/build.make CMakeFiles/c.dir/build
-	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=1,2,3,4,5,6,7 "Built target c"
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=1,2,3,4,5,6,7,8 "Built target c"
 .PHONY : CMakeFiles/c.dir/all
 
 # Build rule for subdir invocation for target.
 CMakeFiles/c.dir/rule: cmake_check_build_system
-	$(CMAKE_COMMAND) -E cmake_progress_start /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles 7
+	$(CMAKE_COMMAND) -E cmake_progress_start /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles 8
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 CMakeFiles/c.dir/all
 	$(CMAKE_COMMAND) -E cmake_progress_start /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles 0
 .PHONY : CMakeFiles/c.dir/rule
Index: request.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/request.txt b/request.txt
new file mode 100644
--- /dev/null	(date 1686494654904)
+++ b/request.txt	(date 1686494654904)
@@ -0,0 +1,1 @@
+findByDirector;Hannam
\ No newline at end of file
Index: cmake-build-debug/CMakeFiles/progress.marks
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>7\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/progress.marks b/cmake-build-debug/CMakeFiles/progress.marks
--- a/cmake-build-debug/CMakeFiles/progress.marks	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/progress.marks	(date 1686494339387)
@@ -1,1 +1,1 @@
-7
+8
Index: cmake-build-debug/CMakeFiles/c.dir/depend.make
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># CMAKE generated file: DO NOT EDIT!\r\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.18\r\n\r\nCMakeFiles/c.dir/databaseInit.c.o: ../databaseInit.c\r\nCMakeFiles/c.dir/databaseInit.c.o: ../databaseInit.h\r\nCMakeFiles/c.dir/databaseInit.c.o: ../hashTableDirectorList.h\r\nCMakeFiles/c.dir/databaseInit.c.o: ../hashTableFilmList.h\r\nCMakeFiles/c.dir/databaseInit.c.o: ../listDirector.h\r\nCMakeFiles/c.dir/databaseInit.c.o: ../listFilm.h\r\n\r\nCMakeFiles/c.dir/hashTableDirectorList.c.o: ../hashTableDirectorList.c\r\nCMakeFiles/c.dir/hashTableDirectorList.c.o: ../hashTableDirectorList.h\r\nCMakeFiles/c.dir/hashTableDirectorList.c.o: ../listDirector.h\r\nCMakeFiles/c.dir/hashTableDirectorList.c.o: ../listFilm.h\r\n\r\nCMakeFiles/c.dir/hashTableFilmList.c.o: ../hashTableDirectorList.h\r\nCMakeFiles/c.dir/hashTableFilmList.c.o: ../hashTableFilmList.c\r\nCMakeFiles/c.dir/hashTableFilmList.c.o: ../hashTableFilmList.h\r\nCMakeFiles/c.dir/hashTableFilmList.c.o: ../listDirector.h\r\nCMakeFiles/c.dir/hashTableFilmList.c.o: ../listFilm.h\r\n\r\nCMakeFiles/c.dir/listDirector.c.o: ../listDirector.c\r\nCMakeFiles/c.dir/listDirector.c.o: ../listDirector.h\r\nCMakeFiles/c.dir/listDirector.c.o: ../listFilm.h\r\n\r\nCMakeFiles/c.dir/listFilm.c.o: ../listFilm.c\r\nCMakeFiles/c.dir/listFilm.c.o: ../listFilm.h\r\n\r\nCMakeFiles/c.dir/main.c.o: ../databaseInit.h\r\nCMakeFiles/c.dir/main.c.o: ../hashTableDirectorList.h\r\nCMakeFiles/c.dir/main.c.o: ../hashTableFilmList.h\r\nCMakeFiles/c.dir/main.c.o: ../listDirector.h\r\nCMakeFiles/c.dir/main.c.o: ../listFilm.h\r\nCMakeFiles/c.dir/main.c.o: ../main.c\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/c.dir/depend.make b/cmake-build-debug/CMakeFiles/c.dir/depend.make
--- a/cmake-build-debug/CMakeFiles/c.dir/depend.make	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/c.dir/depend.make	(date 1686493416297)
@@ -19,6 +19,7 @@
 CMakeFiles/c.dir/hashTableFilmList.c.o: ../listDirector.h
 CMakeFiles/c.dir/hashTableFilmList.c.o: ../listFilm.h
 
+CMakeFiles/c.dir/listDirector.c.o: ../hashTableDirectorList.h
 CMakeFiles/c.dir/listDirector.c.o: ../listDirector.c
 CMakeFiles/c.dir/listDirector.c.o: ../listDirector.h
 CMakeFiles/c.dir/listDirector.c.o: ../listFilm.h
Index: cmake-build-debug/CMakeFiles/c.dir/cmake_clean.cmake
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>file(REMOVE_RECURSE\r\n  \"CMakeFiles/c.dir/databaseInit.c.o\"\r\n  \"CMakeFiles/c.dir/hashTableDirectorList.c.o\"\r\n  \"CMakeFiles/c.dir/hashTableFilmList.c.o\"\r\n  \"CMakeFiles/c.dir/listDirector.c.o\"\r\n  \"CMakeFiles/c.dir/listFilm.c.o\"\r\n  \"CMakeFiles/c.dir/main.c.o\"\r\n  \"c\"\r\n  \"c.pdb\"\r\n)\r\n\r\n# Per-language clean rules from dependency scanning.\r\nforeach(lang C)\r\n  include(CMakeFiles/c.dir/cmake_clean_${lang}.cmake OPTIONAL)\r\nendforeach()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/c.dir/cmake_clean.cmake b/cmake-build-debug/CMakeFiles/c.dir/cmake_clean.cmake
--- a/cmake-build-debug/CMakeFiles/c.dir/cmake_clean.cmake	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/c.dir/cmake_clean.cmake	(date 1686494339239)
@@ -1,4 +1,5 @@
 file(REMOVE_RECURSE
+  "CMakeFiles/c.dir/accountManagement.c.o"
   "CMakeFiles/c.dir/databaseInit.c.o"
   "CMakeFiles/c.dir/hashTableDirectorList.c.o"
   "CMakeFiles/c.dir/hashTableFilmList.c.o"
Index: cmake-build-debug/CMakeFiles/c.dir/build.make
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># CMAKE generated file: DO NOT EDIT!\r\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.18\r\n\r\n# Delete rule output on recipe failure.\r\n.DELETE_ON_ERROR:\r\n\r\n\r\n#=============================================================================\r\n# Special targets provided by cmake.\r\n\r\n# Disable implicit rules so canonical targets will work.\r\n.SUFFIXES:\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : %,v\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : RCS/%\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : RCS/%,v\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : SCCS/s.%\r\n\r\n\r\n# Disable VCS-based implicit rules.\r\n% : s.%\r\n\r\n\r\n.SUFFIXES: .hpux_make_needs_suffix_list\r\n\r\n\r\n# Command-line flag to silence nested $(MAKE).\r\n$(VERBOSE)MAKESILENT = -s\r\n\r\n#Suppress display of executed commands.\r\n$(VERBOSE).SILENT:\r\n\r\n# A target that is always out of date.\r\ncmake_force:\r\n\r\n.PHONY : cmake_force\r\n\r\n#=============================================================================\r\n# Set environment variables for the build.\r\n\r\n# The shell in which to execute make rules.\r\nSHELL = /bin/sh\r\n\r\n# The CMake executable.\r\nCMAKE_COMMAND = /usr/bin/cmake\r\n\r\n# The command to remove a file.\r\nRM = /usr/bin/cmake -E rm -f\r\n\r\n# Escaping for special characters.\r\nEQUALS = =\r\n\r\n# The top-level source directory on which CMake was run.\r\nCMAKE_SOURCE_DIR = /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c\r\n\r\n# The top-level build directory on which CMake was run.\r\nCMAKE_BINARY_DIR = /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug\r\n\r\n# Include any dependencies generated for this target.\r\ninclude CMakeFiles/c.dir/depend.make\r\n\r\n# Include the progress variables for this target.\r\ninclude CMakeFiles/c.dir/progress.make\r\n\r\n# Include the compile flags for this target's objects.\r\ninclude CMakeFiles/c.dir/flags.make\r\n\r\nCMakeFiles/c.dir/listFilm.c.o: CMakeFiles/c.dir/flags.make\r\nCMakeFiles/c.dir/listFilm.c.o: ../listFilm.c\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) \"Building C object CMakeFiles/c.dir/listFilm.c.o\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/c.dir/listFilm.c.o -c /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.c\r\n\r\nCMakeFiles/c.dir/listFilm.c.i: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Preprocessing C source to CMakeFiles/c.dir/listFilm.c.i\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.c > CMakeFiles/c.dir/listFilm.c.i\r\n\r\nCMakeFiles/c.dir/listFilm.c.s: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Compiling C source to assembly CMakeFiles/c.dir/listFilm.c.s\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.c -o CMakeFiles/c.dir/listFilm.c.s\r\n\r\nCMakeFiles/c.dir/databaseInit.c.o: CMakeFiles/c.dir/flags.make\r\nCMakeFiles/c.dir/databaseInit.c.o: ../databaseInit.c\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_2) \"Building C object CMakeFiles/c.dir/databaseInit.c.o\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/c.dir/databaseInit.c.o -c /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.c\r\n\r\nCMakeFiles/c.dir/databaseInit.c.i: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Preprocessing C source to CMakeFiles/c.dir/databaseInit.c.i\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.c > CMakeFiles/c.dir/databaseInit.c.i\r\n\r\nCMakeFiles/c.dir/databaseInit.c.s: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Compiling C source to assembly CMakeFiles/c.dir/databaseInit.c.s\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.c -o CMakeFiles/c.dir/databaseInit.c.s\r\n\r\nCMakeFiles/c.dir/listDirector.c.o: CMakeFiles/c.dir/flags.make\r\nCMakeFiles/c.dir/listDirector.c.o: ../listDirector.c\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_3) \"Building C object CMakeFiles/c.dir/listDirector.c.o\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/c.dir/listDirector.c.o -c /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.c\r\n\r\nCMakeFiles/c.dir/listDirector.c.i: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Preprocessing C source to CMakeFiles/c.dir/listDirector.c.i\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.c > CMakeFiles/c.dir/listDirector.c.i\r\n\r\nCMakeFiles/c.dir/listDirector.c.s: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Compiling C source to assembly CMakeFiles/c.dir/listDirector.c.s\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.c -o CMakeFiles/c.dir/listDirector.c.s\r\n\r\nCMakeFiles/c.dir/hashTableDirectorList.c.o: CMakeFiles/c.dir/flags.make\r\nCMakeFiles/c.dir/hashTableDirectorList.c.o: ../hashTableDirectorList.c\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_4) \"Building C object CMakeFiles/c.dir/hashTableDirectorList.c.o\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/c.dir/hashTableDirectorList.c.o -c /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.c\r\n\r\nCMakeFiles/c.dir/hashTableDirectorList.c.i: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Preprocessing C source to CMakeFiles/c.dir/hashTableDirectorList.c.i\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.c > CMakeFiles/c.dir/hashTableDirectorList.c.i\r\n\r\nCMakeFiles/c.dir/hashTableDirectorList.c.s: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Compiling C source to assembly CMakeFiles/c.dir/hashTableDirectorList.c.s\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.c -o CMakeFiles/c.dir/hashTableDirectorList.c.s\r\n\r\nCMakeFiles/c.dir/main.c.o: CMakeFiles/c.dir/flags.make\r\nCMakeFiles/c.dir/main.c.o: ../main.c\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_5) \"Building C object CMakeFiles/c.dir/main.c.o\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/c.dir/main.c.o -c /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/main.c\r\n\r\nCMakeFiles/c.dir/main.c.i: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Preprocessing C source to CMakeFiles/c.dir/main.c.i\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/main.c > CMakeFiles/c.dir/main.c.i\r\n\r\nCMakeFiles/c.dir/main.c.s: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Compiling C source to assembly CMakeFiles/c.dir/main.c.s\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/main.c -o CMakeFiles/c.dir/main.c.s\r\n\r\nCMakeFiles/c.dir/hashTableFilmList.c.o: CMakeFiles/c.dir/flags.make\r\nCMakeFiles/c.dir/hashTableFilmList.c.o: ../hashTableFilmList.c\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_6) \"Building C object CMakeFiles/c.dir/hashTableFilmList.c.o\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/c.dir/hashTableFilmList.c.o -c /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.c\r\n\r\nCMakeFiles/c.dir/hashTableFilmList.c.i: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Preprocessing C source to CMakeFiles/c.dir/hashTableFilmList.c.i\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.c > CMakeFiles/c.dir/hashTableFilmList.c.i\r\n\r\nCMakeFiles/c.dir/hashTableFilmList.c.s: cmake_force\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green \"Compiling C source to assembly CMakeFiles/c.dir/hashTableFilmList.c.s\"\r\n\t/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.c -o CMakeFiles/c.dir/hashTableFilmList.c.s\r\n\r\n# Object files for target c\r\nc_OBJECTS = \\\r\n\"CMakeFiles/c.dir/listFilm.c.o\" \\\r\n\"CMakeFiles/c.dir/databaseInit.c.o\" \\\r\n\"CMakeFiles/c.dir/listDirector.c.o\" \\\r\n\"CMakeFiles/c.dir/hashTableDirectorList.c.o\" \\\r\n\"CMakeFiles/c.dir/main.c.o\" \\\r\n\"CMakeFiles/c.dir/hashTableFilmList.c.o\"\r\n\r\n# External object files for target c\r\nc_EXTERNAL_OBJECTS =\r\n\r\nc : CMakeFiles/c.dir/listFilm.c.o\r\nc : CMakeFiles/c.dir/databaseInit.c.o\r\nc : CMakeFiles/c.dir/listDirector.c.o\r\nc : CMakeFiles/c.dir/hashTableDirectorList.c.o\r\nc : CMakeFiles/c.dir/main.c.o\r\nc : CMakeFiles/c.dir/hashTableFilmList.c.o\r\nc : CMakeFiles/c.dir/build.make\r\nc : CMakeFiles/c.dir/link.txt\r\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --bold --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_7) \"Linking C executable c\"\r\n\t$(CMAKE_COMMAND) -E cmake_link_script CMakeFiles/c.dir/link.txt --verbose=$(VERBOSE)\r\n\r\n# Rule to build all files generated by this target.\r\nCMakeFiles/c.dir/build: c\r\n\r\n.PHONY : CMakeFiles/c.dir/build\r\n\r\nCMakeFiles/c.dir/clean:\r\n\t$(CMAKE_COMMAND) -P CMakeFiles/c.dir/cmake_clean.cmake\r\n.PHONY : CMakeFiles/c.dir/clean\r\n\r\nCMakeFiles/c.dir/depend:\r\n\tcd /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug && $(CMAKE_COMMAND) -E cmake_depends \"Unix Makefiles\" /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/DependInfo.cmake --color=$(COLOR)\r\n.PHONY : CMakeFiles/c.dir/depend\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/c.dir/build.make b/cmake-build-debug/CMakeFiles/c.dir/build.make
--- a/cmake-build-debug/CMakeFiles/c.dir/build.make	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/c.dir/build.make	(date 1686494324952)
@@ -154,6 +154,19 @@
 	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/c.dir/hashTableFilmList.c.s"
 	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.c -o CMakeFiles/c.dir/hashTableFilmList.c.s
 
+CMakeFiles/c.dir/accountManagement.c.o: CMakeFiles/c.dir/flags.make
+CMakeFiles/c.dir/accountManagement.c.o: ../accountManagement.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_7) "Building C object CMakeFiles/c.dir/accountManagement.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/c.dir/accountManagement.c.o -c /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/accountManagement.c
+
+CMakeFiles/c.dir/accountManagement.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/c.dir/accountManagement.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/accountManagement.c > CMakeFiles/c.dir/accountManagement.c.i
+
+CMakeFiles/c.dir/accountManagement.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/c.dir/accountManagement.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/accountManagement.c -o CMakeFiles/c.dir/accountManagement.c.s
+
 # Object files for target c
 c_OBJECTS = \
 "CMakeFiles/c.dir/listFilm.c.o" \
@@ -161,7 +174,8 @@
 "CMakeFiles/c.dir/listDirector.c.o" \
 "CMakeFiles/c.dir/hashTableDirectorList.c.o" \
 "CMakeFiles/c.dir/main.c.o" \
-"CMakeFiles/c.dir/hashTableFilmList.c.o"
+"CMakeFiles/c.dir/hashTableFilmList.c.o" \
+"CMakeFiles/c.dir/accountManagement.c.o"
 
 # External object files for target c
 c_EXTERNAL_OBJECTS =
@@ -172,9 +186,10 @@
 c : CMakeFiles/c.dir/hashTableDirectorList.c.o
 c : CMakeFiles/c.dir/main.c.o
 c : CMakeFiles/c.dir/hashTableFilmList.c.o
+c : CMakeFiles/c.dir/accountManagement.c.o
 c : CMakeFiles/c.dir/build.make
 c : CMakeFiles/c.dir/link.txt
-	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --bold --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_7) "Linking C executable c"
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --bold --progress-dir=/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_8) "Linking C executable c"
 	$(CMAKE_COMMAND) -E cmake_link_script CMakeFiles/c.dir/link.txt --verbose=$(VERBOSE)
 
 # Rule to build all files generated by this target.
Index: cmake-build-debug/CMakeFiles/c.dir/DependInfo.cmake
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># The set of languages for which implicit dependencies are needed:\r\nset(CMAKE_DEPENDS_LANGUAGES\r\n  \"C\"\r\n  )\r\n# The set of files for implicit dependencies of each language:\r\nset(CMAKE_DEPENDS_CHECK_C\r\n  \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.c\" \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/databaseInit.c.o\"\r\n  \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.c\" \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/hashTableDirectorList.c.o\"\r\n  \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.c\" \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/hashTableFilmList.c.o\"\r\n  \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.c\" \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/listDirector.c.o\"\r\n  \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.c\" \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/listFilm.c.o\"\r\n  \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/main.c\" \"/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/main.c.o\"\r\n  )\r\nset(CMAKE_C_COMPILER_ID \"GNU\")\r\n\r\n# The include file search paths:\r\nset(CMAKE_C_TARGET_INCLUDE_PATH\r\n  )\r\n\r\n# Targets to which this target links.\r\nset(CMAKE_TARGET_LINKED_INFO_FILES\r\n  )\r\n\r\n# Fortran module output directory.\r\nset(CMAKE_Fortran_TARGET_MODULE_DIR \"\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/c.dir/DependInfo.cmake b/cmake-build-debug/CMakeFiles/c.dir/DependInfo.cmake
--- a/cmake-build-debug/CMakeFiles/c.dir/DependInfo.cmake	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/c.dir/DependInfo.cmake	(date 1686494324964)
@@ -4,6 +4,7 @@
   )
 # The set of files for implicit dependencies of each language:
 set(CMAKE_DEPENDS_CHECK_C
+  "/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/accountManagement.c" "/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/accountManagement.c.o"
   "/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.c" "/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/databaseInit.c.o"
   "/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.c" "/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/hashTableDirectorList.c.o"
   "/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.c" "/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/cmake-build-debug/CMakeFiles/c.dir/hashTableFilmList.c.o"
Index: cmake-build-debug/CMakeFiles/c.dir/progress.make
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>CMAKE_PROGRESS_1 = 1\r\nCMAKE_PROGRESS_2 = 2\r\nCMAKE_PROGRESS_3 = 3\r\nCMAKE_PROGRESS_4 = 4\r\nCMAKE_PROGRESS_5 = 5\r\nCMAKE_PROGRESS_6 = 6\r\nCMAKE_PROGRESS_7 = 7\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/c.dir/progress.make b/cmake-build-debug/CMakeFiles/c.dir/progress.make
--- a/cmake-build-debug/CMakeFiles/c.dir/progress.make	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/c.dir/progress.make	(date 1686494339374)
@@ -5,4 +5,5 @@
 CMAKE_PROGRESS_5 = 5
 CMAKE_PROGRESS_6 = 6
 CMAKE_PROGRESS_7 = 7
+CMAKE_PROGRESS_8 = 8
 
Index: cmake-build-debug/CMakeFiles/c.dir/link.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/usr/bin/cc -g CMakeFiles/c.dir/listFilm.c.o CMakeFiles/c.dir/databaseInit.c.o CMakeFiles/c.dir/listDirector.c.o CMakeFiles/c.dir/hashTableDirectorList.c.o CMakeFiles/c.dir/main.c.o CMakeFiles/c.dir/hashTableFilmList.c.o -o c \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/c.dir/link.txt b/cmake-build-debug/CMakeFiles/c.dir/link.txt
--- a/cmake-build-debug/CMakeFiles/c.dir/link.txt	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/c.dir/link.txt	(date 1686494324937)
@@ -1,1 +1,1 @@
-/usr/bin/cc -g CMakeFiles/c.dir/listFilm.c.o CMakeFiles/c.dir/databaseInit.c.o CMakeFiles/c.dir/listDirector.c.o CMakeFiles/c.dir/hashTableDirectorList.c.o CMakeFiles/c.dir/main.c.o CMakeFiles/c.dir/hashTableFilmList.c.o -o c 
+/usr/bin/cc -g CMakeFiles/c.dir/listFilm.c.o CMakeFiles/c.dir/databaseInit.c.o CMakeFiles/c.dir/listDirector.c.o CMakeFiles/c.dir/hashTableDirectorList.c.o CMakeFiles/c.dir/main.c.o CMakeFiles/c.dir/hashTableFilmList.c.o CMakeFiles/c.dir/accountManagement.c.o -o c 
Index: cmake-build-debug/CMakeFiles/c.dir/depend.internal
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># CMAKE generated file: DO NOT EDIT!\r\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.18\r\n\r\nCMakeFiles/c.dir/databaseInit.c.o\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.c\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\nCMakeFiles/c.dir/hashTableDirectorList.c.o\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.c\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\nCMakeFiles/c.dir/hashTableFilmList.c.o\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.c\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\nCMakeFiles/c.dir/listDirector.c.o\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.c\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\nCMakeFiles/c.dir/listFilm.c.o\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.c\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\nCMakeFiles/c.dir/main.c.o\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\n /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/main.c\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/c.dir/depend.internal b/cmake-build-debug/CMakeFiles/c.dir/depend.internal
--- a/cmake-build-debug/CMakeFiles/c.dir/depend.internal	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/c.dir/depend.internal	(date 1686493416292)
@@ -20,6 +20,7 @@
  /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h
  /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h
 CMakeFiles/c.dir/listDirector.c.o
+ /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h
  /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.c
  /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h
  /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h
Index: hashTableDirectorList.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by nirin on 5/12/2023.\r\n//\r\n\r\n#include \"hashTableDirectorList.h\"\r\n\r\n\r\nstruct HashTable* createEmptyHashTable(unsigned int buckets){\r\n    struct HashTable* h1 = malloc(sizeof(struct HashTable));\r\n    if(h1 == NULL){\r\n        printf(\"malloc error\");\r\n        return h1;\r\n    }\r\n    h1->buckets = buckets;\r\n    h1->items = 0;\r\n    h1->table = malloc(buckets*sizeof(struct ListDirector*));\r\n\r\n}\r\nbool isHashTableEmpty(struct HashTable* ht){\r\n    if(ht == NULL){\r\n        return true;\r\n    }\r\n    else return false;\r\n}\r\n\r\nunsigned int hashTableElements(struct HashTable* ht){\r\n    if(isHashTableEmpty(ht)){\r\n        return 0;\r\n    }\r\n    return ht->items;\r\n    \r\n}\r\n\r\nint hash_function(struct HashTable* ht, char* director){\r\n    unsigned long hash = 5381;\r\n    int c;\r\n\r\n    while (c = *director++)\r\n        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */\r\n\r\n    return hash%ht->buckets;\r\n}\r\n\r\nbool insert(struct HashTable* ht, char* director, char* title, int duration, char* genre){\r\n    if(isHashTableEmpty(ht)){\r\n        return false;\r\n    }\r\n    int hashedValue = hash_function(ht, director);\r\n    if(ht->table[hashedValue] == NULL){ //vide, créer la liste et insérer la valeur\r\n\r\n        ht->table[hashedValue] = createEmptyListDirector();\r\n        addFirstDirector(ht->table[hashedValue], director);\r\n        addFirstFilm(ht->table[hashedValue]->head->films, title, duration, genre);\r\n        ht->table[hashedValue]->head->nmbFilm++;\r\n        ht->items++;\r\n        return true;\r\n\r\n    }\r\n    else{ //il y a collision, j'ajoute à la liste la valeur\r\n        if(directorBelongs(ht->table[hashedValue], director) != NULL){ //DirectorBelongs return the cell if founded or NULL if not\r\n            directorBelongs(ht->table[hashedValue], director)->nmbFilm++;\r\n            addFirstFilm(directorBelongs(ht->table[hashedValue], director)->films, title, duration, genre);\r\n            return true;\r\n        }\r\n        else { //Il y a collision mais le directeur n'appartient pas\r\n            addFirstDirector(ht->table[hashedValue], director);\r\n            addFirstFilm(ht->table[hashedValue]->head->films, title, duration, genre);\r\n            ht->table[hashedValue]->head->nmbFilm++;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nvoid printHashTable(struct HashTable* ht){\r\n    if(isHashTableEmpty(ht)){\r\n        printf(\"HashTable Empty\");\r\n        return;\r\n    }\r\n    for(int i = 0; i < ht->buckets; i++){\r\n        printf(\"%d: \", i);\r\n        if(ht->table[i] == NULL){\r\n            printf(\"\\n\");\r\n        }\r\n        else printListDirector(ht->table[i]);\r\n\r\n    }\r\n}\r\n\r\nbool exists(struct HashTable* ht, char* director){\r\n    int hash = hash_function(ht, director);\r\n    if(ht->table[hash] == NULL){\r\n        return false;\r\n    }\r\n    else return true;\r\n}\r\n\r\nvoid deleteItem(struct HashTable* ht, char* director){\r\n    if(isHashTableEmpty(ht)){\r\n        printf(\"HT empty maaan\");\r\n        return;\r\n    }\r\n    int hashedValue = hash_function(ht, director);\r\n    bool valid = true;\r\n    if(exists(ht, director)){\r\n\r\n        if(ht->table[hashedValue]->size > 1){ //Il y a plusieurs collisions, il faut parcourir la liste des collisions\r\n            int posValue = getPosItemDirector(ht->table[hashedValue], director); //Obtient la position de l'élement à supprimer dans la liste\r\n            deleteItemPosDirector(ht->table[hashedValue], posValue, &valid);// Supprimer l'élement à la position renseignée\r\n        }\r\n        //Finir la suppression\r\n\r\n    }\r\n}\r\n\r\nvoid deleteHashTable(struct HashTable** ht){\r\n    if(isHashTableEmpty(*ht)){\r\n        printf(\"HT empty\");\r\n        return;\r\n    }\r\n\r\n    for(int i = 0; i < (*ht)->buckets; i++){\r\n        deleteListDirector(&(*ht)->table[i]);\r\n    }\r\n    free((*ht)->table);\r\n    free(*ht);\r\n    ht = NULL;\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hashTableDirectorList.c b/hashTableDirectorList.c
--- a/hashTableDirectorList.c	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/hashTableDirectorList.c	(date 1686481553568)
@@ -41,7 +41,7 @@
     return hash%ht->buckets;
 }
 
-bool insert(struct HashTable* ht, char* director, char* title, int duration, char* genre){
+bool insert(struct HashTable* ht, char* director, char* title, int duration, char* genre, int* maxFilm){
     if(isHashTableEmpty(ht)){
         return false;
     }
@@ -49,23 +49,38 @@
     if(ht->table[hashedValue] == NULL){ //vide, créer la liste et insérer la valeur
 
         ht->table[hashedValue] = createEmptyListDirector();
-        addFirstDirector(ht->table[hashedValue], director);
-        addFirstFilm(ht->table[hashedValue]->head->films, title, duration, genre);
-        ht->table[hashedValue]->head->nmbFilm++;
+        addFirstDirector(ht->table[hashedValue], director); //j'ajoute le directeur en début de liste
+        addFirstFilm(ht->table[hashedValue]->head->films, title, duration, genre); //j'ajoute le film du directeur situé en début de list
+        ht->table[hashedValue]->head->nmbFilm++; //J'incrémente le nombre de film
+
+        if(ht->table[hashedValue]->head->nmbFilm > *maxFilm){ //Ce directeur à fait le plus de film, je stocke sa cellule comme topDirector
+            ht->topDirector = ht->table[hashedValue]->head;
+        }
         ht->items++;
         return true;
 
     }
     else{ //il y a collision, j'ajoute à la liste la valeur
-        if(directorBelongs(ht->table[hashedValue], director) != NULL){ //DirectorBelongs return the cell if founded or NULL if not
-            directorBelongs(ht->table[hashedValue], director)->nmbFilm++;
-            addFirstFilm(directorBelongs(ht->table[hashedValue], director)->films, title, duration, genre);
+        struct Director* temp = directorBelongs(ht->table[hashedValue],director); //DirectorBelongs return the cell if founded or NULL if not
+
+        if(temp != NULL){ //Le directeur existe déjà
+            temp->nmbFilm++;
+            addFirstFilm(temp->films, title, duration, genre);
+
+            if(temp->nmbFilm > *maxFilm){ //Ce directeur à fait le plus de film, je stocke sa cellule comme topDirector
+                ht->topDirector = temp;
+            }
             return true;
         }
         else { //Il y a collision mais le directeur n'appartient pas
+
             addFirstDirector(ht->table[hashedValue], director);
             addFirstFilm(ht->table[hashedValue]->head->films, title, duration, genre);
             ht->table[hashedValue]->head->nmbFilm++;
+
+            if(ht->table[hashedValue]->head->nmbFilm > *maxFilm){ //Ce directeur à fait le plus de film, je stocke sa cellule comme topDirector
+                ht->topDirector = ht->table[hashedValue]->head;
+            }
             return true;
         }
     }
Index: cmake-build-debug/CMakeFiles/c.dir/C.includecache
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#IncludeRegexLine: ^[ \t]*[#%][ \t]*(include|import)[ \t]*[<\"]([^\">]+)([\">])\r\n\r\n#IncludeRegexScan: ^.*$\r\n\r\n#IncludeRegexComplain: ^$\r\n\r\n#IncludeRegexTransform: \r\n\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.h\r\nlistDirector.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\r\nlistFilm.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\nhashTableDirectorList.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h\r\nhashTableFilmList.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.h\r\nstring.h\r\n-\r\ntime.h\r\n-\r\nstdlib.h\r\n-\r\n\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h\r\nlistDirector.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\r\nlistFilm.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\ntime.h\r\n-\r\n\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.h\r\nlistDirector.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\r\nlistFilm.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\nhashTableDirectorList.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h\r\ntime.h\r\n-\r\n\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h\r\nstdio.h\r\n-\r\nstdbool.h\r\n-\r\nstdlib.h\r\n-\r\nstring.h\r\n-\r\nlistFilm.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\n\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h\r\nstdio.h\r\n-\r\nstdbool.h\r\n-\r\nstdlib.h\r\n-\r\nstring.h\r\n-\r\n\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/main.c\r\nhashTableDirectorList.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h\r\nhashTableFilmList.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.h\r\ndatabaseInit.h\r\n/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.h\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/c.dir/C.includecache b/cmake-build-debug/CMakeFiles/c.dir/C.includecache
--- a/cmake-build-debug/CMakeFiles/c.dir/C.includecache	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/cmake-build-debug/CMakeFiles/c.dir/C.includecache	(date 1686493416291)
@@ -6,6 +6,12 @@
 
 #IncludeRegexTransform: 
 
+/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.c
+databaseInit.h
+/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.h
+unistd.h
+-
+
 /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.h
 listDirector.h
 /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listDirector.h
@@ -51,6 +57,8 @@
 -
 listFilm.h
 /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h
+hashTableDirectorList.h
+/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h
 
 /mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/listFilm.h
 stdio.h
@@ -62,11 +70,3 @@
 string.h
 -
 
-/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/main.c
-hashTableDirectorList.h
-/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableDirectorList.h
-hashTableFilmList.h
-/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/hashTableFilmList.h
-databaseInit.h
-/mnt/c/Users/nirin/Documents/GitHub/projetCIR1_groupe_7/src/c/databaseInit.h
-
Index: hashTableDirectorList.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by nirin on 5/12/2023.\r\n//\r\n#include \"listDirector.h\"\r\n#include \"listFilm.h\"\r\n#include <time.h>\r\n#ifndef TP15_2_HASHISH_HASHTABLEINTLIST_H\r\n#define TP15_2_HASHISH_HASHTABLEINTLIST_H\r\n\r\nstruct HashTable {\r\n    unsigned int items;\r\n    unsigned int buckets;\r\n    struct ListDirector** table;\r\n};\r\n\r\n\r\nstruct HashTable* createEmptyHashTable(unsigned int buckets);\r\nbool isHashTableEmpty(struct HashTable* ht);\r\nunsigned int hashTableElements(struct HashTable* ht);\r\nint hash_function(struct HashTable* ht, char* director);\r\n// Inserts \"value\" in the table. If no collision, it returns True, otherwise False\r\nbool insert(struct HashTable* ht, char* director, char* title, int duration, char* genre);\r\n\r\nbool exists(struct HashTable* ht, char* director);\r\nvoid printHashTable(struct HashTable* ht);\r\nvoid deleteItem(struct HashTable* ht, char* director);\r\nvoid deleteHashTable(struct HashTable** ht);\r\n// Shows the whole content of the table as a histogram\r\n// For each bucket, print a '*' to indicate an item\r\nvoid printAsHistogram(struct HashTable* ht);\r\n#endif //TP15_2_HASHISH_HASHTABLEINTLIST_H\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hashTableDirectorList.h b/hashTableDirectorList.h
--- a/hashTableDirectorList.h	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/hashTableDirectorList.h	(date 1686481553720)
@@ -11,6 +11,7 @@
     unsigned int items;
     unsigned int buckets;
     struct ListDirector** table;
+    struct Director* topDirector;
 };
 
 
@@ -19,7 +20,7 @@
 unsigned int hashTableElements(struct HashTable* ht);
 int hash_function(struct HashTable* ht, char* director);
 // Inserts "value" in the table. If no collision, it returns True, otherwise False
-bool insert(struct HashTable* ht, char* director, char* title, int duration, char* genre);
+bool insert(struct HashTable* ht, char* director, char* title, int duration, char* genre, int* maxFilm);
 
 bool exists(struct HashTable* ht, char* director);
 void printHashTable(struct HashTable* ht);
Index: hashTableFilmList.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by nirin on 5/12/2023.\r\n//\r\n#include \"listDirector.h\"\r\n#include \"listFilm.h\"\r\n#include \"hashTableDirectorList.h\"\r\n#include <time.h>\r\n#ifndef Film\r\n#define Film\r\n\r\nstruct HashTableFilm {\r\n    unsigned int items;\r\n    unsigned int buckets;\r\n    struct ListFilm** table;\r\n};\r\n\r\n\r\nstruct HashTableFilm* createEmptyHashTableFilm(unsigned int buckets);\r\nbool isHashTableEmptyFilm(struct HashTableFilm* ht);\r\nunsigned int hashTableElementsFilm(struct HashTableFilm* ht);\r\nint hash_functionFilm(struct HashTableFilm* ht, char* genre);\r\n// Inserts \"value\" in the table. If no collision, it returns True, otherwise False\r\nbool insertFilmRead(struct HashTableFilm* ht, char* title, int duration, char* genre);\r\n\r\nbool existsFilm(struct HashTableFilm* ht, char* genre);\r\nvoid printHashTableFilm(struct HashTableFilm* ht);\r\nvoid deleteItemFilm(struct HashTableFilm* ht, char* title);\r\nvoid deleteHashTableFilm(struct HashTableFilm** ht);\r\n// Shows the whole content of the table as a histogram\r\n// For each bucket, print a '*' to indicate an item\r\n\r\n#endif //Film\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hashTableFilmList.h b/hashTableFilmList.h
--- a/hashTableFilmList.h	(revision 6ebf0fbb1ed95817359245b0a1256869f63c37c0)
+++ b/hashTableFilmList.h	(date 1686485889543)
@@ -18,9 +18,11 @@
 struct HashTableFilm* createEmptyHashTableFilm(unsigned int buckets);
 bool isHashTableEmptyFilm(struct HashTableFilm* ht);
 unsigned int hashTableElementsFilm(struct HashTableFilm* ht);
-int hash_functionFilm(struct HashTableFilm* ht, char* genre);
+int hash_functionFilm(struct HashTableFilm* ht, char* title);
+int hash_functionGenre(struct HashTableFilm* ht, char* genre);
 // Inserts "value" in the table. If no collision, it returns True, otherwise False
 bool insertFilmRead(struct HashTableFilm* ht, char* title, int duration, char* genre);
+bool insertFilmGenre(struct HashTableFilm* ht, char* genre, int duration, char* title);
 
 bool existsFilm(struct HashTableFilm* ht, char* genre);
 void printHashTableFilm(struct HashTableFilm* ht);
diff --git a/cmake-build-debug/ready.txt b/cmake-build-debug/ready.txt
deleted file mode 100644
